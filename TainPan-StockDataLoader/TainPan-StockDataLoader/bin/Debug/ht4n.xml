<?xml version="1.0"?>
<doc>
    <assembly>
        "ht4n"
    </assembly>
    <members>
        <member name="M:ht4c.Logging.removeLoggingSink(ht4c.LoggingSink*)">
            <summary>
Removes a log event callback.
</summary>
            <param name="loggingSink">Log event callback to remove</param>
        </member>
        <member name="M:ht4c.Logging.addLoggingSink(ht4c.LoggingSink*)">
            <summary>
Adds a log event callback.
</summary>
            <param name="loggingSink">Log event callback to add</param>
        </member>
        <member name="M:ht4c.Logging.setLogfile(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Sets the log file name.
</summary>
            <param name="filename">Log file name</param>
        </member>
        <member name="M:ht4c.Logging.getLogfile">
            <summary>
Returns the log file name.
</summary>
            <returns>Log file name</returns>
        </member>
        <member name="T:ht4c.Logging">
            <summary>
Logging utility, redirects log events to a file and/or log callbacks.
</summary>
            <remarks>Links between native and C++/CLI.</remarks>
        </member>
        <member name="M:ht4c.LoggingSink.logMessage(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Gets called if a log event occurs.
</summary>
            <param name="message">Log event message</param>
        </member>
        <member name="M:ht4c.LoggingSink.logEvent(System.Int32,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Gets called if a log event occurs.
</summary>
            <param name="priority">Log event priority</param>
            <param name="message">Log event message</param>
        </member>
        <member name="M:ht4c.LoggingSink.Dispose">
            <summary>
Destroys the LoggingSink instance.
</summary>
        </member>
        <member name="T:ht4c.LoggingSink">
            <summary>
Abstract class represents a callback for log events.
</summary>
        </member>
        <member name="M:Hypertable.Composition.ContextFactory.Create(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
Creates a new Context instance using specified configuration properties.
</summary>
            <param name="connectionString">Connection string.</param>
            <param name="properties">Configuration properties, might overwrite those properties from connection string.</param>
            <returns>New Context instance.</returns>
            <remarks>
Following property types will be forwarded to the native ht4c providers:
<table class="comment"><tr><td>string</td><td>IEnumerable&lt;string&gt;</td></tr><tr><td>int</td><td>IEnumerable&lt;int&gt;</td></tr><tr><td>long</td><td>IEnumerable&lt;long&gt;</td></tr><tr><td>ushort</td></tr><tr><td>double</td><td>IEnumerable&lt;double&gt;</td></tr><tr><td>bool</td></tr></table></remarks>
        </member>
        <member name="M:Hypertable.Composition.ContextFactory.Create(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
Creates a new Context instance using specified configuration properties.
</summary>
            <param name="properties">Configuration properties.</param>
            <returns>New Context instance.</returns>
            <remarks>
Following property types will be forwarded to the native ht4c providers:
<table class="comment"><tr><td>string</td><td>IEnumerable&lt;string&gt;</td></tr><tr><td>int</td><td>IEnumerable&lt;int&gt;</td></tr><tr><td>long</td><td>IEnumerable&lt;long&gt;</td></tr><tr><td>ushort</td></tr><tr><td>double</td><td>IEnumerable&lt;double&gt;</td></tr><tr><td>bool</td></tr></table></remarks>
        </member>
        <member name="M:Hypertable.Composition.ContextFactory.Create(System.String)">
            <summary>
Creates a new Context instance using specified connection string.
</summary>
            <param name="connectionString">Connection string.</param>
            <returns>New Context instance.</returns>
        </member>
        <member name="M:Hypertable.Composition.ContextFactory.#ctor">
            <summary>
Initializes a new instance of the ContextFactory class.
</summary>
        </member>
        <member name="T:Hypertable.Composition.ContextFactory">
            <summary>
Represents a Hypertable context factory.
</summary>
            <seealso cref="T:Hypertable.Composition.IContextFactory" />
        </member>
        <member name="M:Hypertable.Composition.IContextFactory.Create(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
Creates a new Context instance using specified configuration properties.
</summary>
            <param name="connectionString">Connection string.</param>
            <param name="properties">Configuration properties, might overwrite those properties from connection string.</param>
            <returns>New Context instance.</returns>
            <remarks>
Following property types will be forwarded to the native ht4c providers:
<table class="comment"><tr><td>string</td><td>IEnumerable&lt;string&gt;</td></tr><tr><td>int</td><td>IEnumerable&lt;int&gt;</td></tr><tr><td>long</td><td>IEnumerable&lt;long&gt;</td></tr><tr><td>ushort</td></tr><tr><td>double</td><td>IEnumerable&lt;double&gt;</td></tr><tr><td>bool</td></tr></table></remarks>
        </member>
        <member name="M:Hypertable.Composition.IContextFactory.Create(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
Creates a new Context instance using specified configuration properties.
</summary>
            <param name="properties">Configuration properties.</param>
            <returns>New Context instance.</returns>
            <remarks>
Following property types will be forwarded to the native ht4c providers:
<table class="comment"><tr><td>string</td><td>IEnumerable&lt;string&gt;</td></tr><tr><td>int</td><td>IEnumerable&lt;int&gt;</td></tr><tr><td>long</td><td>IEnumerable&lt;long&gt;</td></tr><tr><td>ushort</td></tr><tr><td>double</td><td>IEnumerable&lt;double&gt;</td></tr><tr><td>bool</td></tr></table></remarks>
        </member>
        <member name="M:Hypertable.Composition.IContextFactory.Create(System.String)">
            <summary>
Creates a new Context instance using specified connection string.
</summary>
            <param name="connectionString">Connection string.</param>
            <returns>New Context instance.</returns>
        </member>
        <member name="T:Hypertable.Composition.IContextFactory">
            <summary>
Represents a Hypertable context factory.
</summary>
            <example>
The following example shows how to import the context factory.
<code>
using System;
using System.ComponentModel.Composition;
using System.ComponentModel.Composition.Hosting;
using System.Reflection;

class ImportContextFactory
{
   [Import(typeof(IContextFactory))]
   private IContextFactory contextFactory;

   public Compose()
      using (var catalog = new AggregateCatalog()) {
         catalog.Catalogs.Add(new AssemblyCatalog(Assembly.GetAssembly(typeof(IContextFactory))));
         using (var container = new CompositionContainer(catalog)) {
            container.ComposeParts(this);

            using (var context = this.contextFactory.Create("Provider=Hyper; Uri=net.tcp://localhost")) {
               using (var client = context.CreateClient()) {
                  // use the client
               }
            }
         }
      }
   }
}
</code></example>
            <seealso cref="T:Hypertable.IContext" />
        </member>
        <member name="P:Hypertable.Composition.ExportContextProviderAttribute.ProviderName">
            <summary>
Gets the context provider name.
</summary>
        </member>
        <member name="M:Hypertable.Composition.ExportContextProviderAttribute.#ctor(System.String)">
            <summary>
Initializes a new instance of the ExportContextProviderAttribute class.
</summary>
            <param name="providerName">Context provider name.</param>
        </member>
        <member name="T:Hypertable.Composition.ExportContextProviderAttribute">
            <summary>
Specifies a particular context provider export.
</summary>
            <example>
The following example shows how to export a context provider.
<code>
using System;
using System.Collections.Generic;
using Hypertable.Composition;

[ExportContextProvider("SampleContextProvider")]
public class SampleContextProvider : IContextProvider
{
    public Func&lt;IDictionary&lt;string, object&gt;, IContext&gt; Provider {
        get {
            return (properties) =&gt; new SampleContext(properties);
        }
    }
}

void foo() {
   // set the "Hypertable.Composition.ComposablePartCatalogs" property which expects
   // a ComposablePartCatalog or an IEnumerable&lt;ComposablePartCatalog&gt;
   var properties = new Dictionary&lt;string, object&gt;
      {
         { "Hypertable.Composition.ComposablePartCatalogs", new AssemblyCatalog(Assembly.GetExecutingAssembly()) }
      };
   using (var context = Context.Create("Provider=SampleContextProvider", properties)) {
      // use the context
   }
}
</code></example>
            <seealso cref="T:Hypertable.Composition.IContextProvider" />
            <seealso cref="T:Hypertable.Composition.IContextProviderMetadata" />
        </member>
        <member name="M:ht4c.Common.AsyncTableMutator.#ctor">
            <summary>
Creates a new TableMutator instance.
</summary>
        </member>
        <member name="M:ht4c.Common.AsyncTableMutator.id">
            <summary>
Returns the mutator identifier.
</summary>
            <returns>Asynchronous table mutator identifier</returns>
        </member>
        <member name="M:ht4c.Common.AsyncTableMutator.Dispose">
            <summary>
Destroys the TableMutator instance.
</summary>
        </member>
        <member name="T:ht4c.Common.AsyncTableMutator">
            <summary>
Abstract class represents an asynchronous table mutator.
</summary>
        </member>
        <member name="M:ht4c.Common.Table.#ctor">
            <summary>
Creates a new Table instance.
</summary>
        </member>
        <member name="M:ht4c.Common.Table.getSchema(System.Boolean)">
            <summary>
Returns the xml schema for this table.
</summary>
            <param name="withIds">Include the id's in the schema</param>
            <returns>xml schema</returns>
        </member>
        <member name="M:ht4c.Common.Table.createAsyncScannerId(ht4c.Common.ScanSpec*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ht4c.Common.AsyncResult*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32,System.UInt32)">
            <summary>
Creates a new asynchronous scanner on this table and returns the scanner identifier.
</summary>
            <param name="scanSpec">Scan specification</param>
            <param name="asyncResult">Receives the results from the asynchronous scan operations</param>
            <param name="timeoutMsec">Maximum time [ms] to allow scanner methods to execute before time out</param>
            <param name="flags">Scanner flags</param>
            <returns>Newly created asynchronous table scanner identifier</returns>
            <seealso cref="T:ht4c.Common.AsyncTableScanner" />
            <seealso cref="T:ht4c.Common.ScanSpec" />
            <seealso cref="T:ht4c.Common.AsyncResult" />
            <seealso cref="T:ht4c.Common.ScannerFlags" />
        </member>
        <member name="M:ht4c.Common.Table.createAsyncScanner(ht4c.Common.ScanSpec*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ht4c.Common.AsyncResult*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32,System.UInt32)">
            <summary>
Creates a new asynchronous scanner on this table.
</summary>
            <param name="scanSpec">Scan specification</param>
            <param name="asyncResult">Receives the results from the asynchronous scan operations</param>
            <param name="timeoutMsec">Maximum time [ms] to allow scanner methods to execute before time out</param>
            <param name="flags">Scanner flags</param>
            <returns>Newly created asynchronous table scanner</returns>
            <seealso cref="T:ht4c.Common.AsyncTableScanner" />
            <seealso cref="T:ht4c.Common.ScanSpec" />
            <seealso cref="T:ht4c.Common.AsyncResult" />
            <seealso cref="T:ht4c.Common.ScannerFlags" />
        </member>
        <member name="M:ht4c.Common.Table.createScanner(ht4c.Common.ScanSpec*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32,System.UInt32)">
            <summary>
Creates a new synchronous scanner on this table.
</summary>
            <param name="scanSpec">Scan specification</param>
            <param name="timeoutMsec">Maximum time [ms] to allow scanner methods to execute before time out</param>
            <param name="flags">Scanner flags</param>
            <returns>Newly created synchronous table scanner</returns>
            <seealso cref="T:ht4c.Common.TableScanner" />
            <seealso cref="T:ht4c.Common.ScanSpec" />
            <seealso cref="T:ht4c.Common.ScannerFlags" />
        </member>
        <member name="M:ht4c.Common.Table.createAsyncMutator(ht4c.Common.AsyncResult*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32,System.UInt32)">
            <summary>
Creates a new asynchronous mutator on this table.
</summary>
            <param name="asyncResult">Receives the results from the asynchronous mutator operations</param>
            <param name="timeoutMsec">Maximum time [ms] to allow mutator methods to execute before time out</param>
            <param name="flags">Mutator flags</param>
            <returns>Newly created asynchronous table mutator</returns>
            <seealso cref="T:ht4c.Common.TableMutator" />
            <seealso cref="T:ht4c.Common.MutatorFlags" />
        </member>
        <member name="M:ht4c.Common.Table.createMutator(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
Creates a new table mutator on this table.
</summary>
            <param name="timeoutMsec">Maximum time [ms] to allow mutator methods to execute before time out</param>
            <param name="flags">Mutator flags</param>
            <param name="flushIntervalMsec">Periodic flush interval [ms], if zero periodic flush is disabled.</param>
            <returns>Newly created table mutator</returns>
            <seealso cref="T:ht4c.Common.TableMutator" />
            <seealso cref="T:ht4c.Common.MutatorFlags" />
        </member>
        <member name="M:ht4c.Common.Table.getName">
            <summary>
Returns the table name.
</summary>
            <returns>Table name</returns>
        </member>
        <member name="M:ht4c.Common.Table.getContextKind">
            <summary>
Returns the context kind.
</summary>
        </member>
        <member name="M:ht4c.Common.Table.Dispose">
            <summary>
Destroys the Table instance.
</summary>
        </member>
        <member name="T:ht4c.Common.Table">
            <summary>
Abstract class represents a Hypertable table.
</summary>
        </member>
        <member name="M:Hypertable.ChunkedTableMutator.Finalize">
            <summary>
Clean up all unmanaged resources.
</summary>
        </member>
        <member name="M:Hypertable.ChunkedTableMutator.Dispose">
            <summary>
Clean up all managed and unmanaged resources.
</summary>
        </member>
        <member name="T:Hypertable.ChunkedTableMutator">
            <summary>
Represents a chunked table mutator.
</summary>
            <seealso cref="T:Hypertable.ITableMutator" />
        </member>
        <member name="M:Hypertable.MutatorSpec.CreateChunkedQueued">
            <summary>
Creates a new MutatorSpec instance for creating a queued chunked mutator.
</summary>
            <returns>New MutatorSpec instance.</returns>
        </member>
        <member name="M:Hypertable.MutatorSpec.CreateChunked">
            <summary>
Creates a new MutatorSpec instance for creating a chunked mutator.
</summary>
            <returns>New MutatorSpec instance.</returns>
        </member>
        <member name="M:Hypertable.MutatorSpec.CreateQueued">
            <summary>
Creates a new MutatorSpec instance for creating a queued mutator.
</summary>
            <returns>New MutatorSpec instance.</returns>
        </member>
        <member name="M:Hypertable.MutatorSpec.Create">
            <summary>
Creates a new default MutatorSpec instance.
</summary>
            <returns>New MutatorSpec instance.</returns>
        </member>
        <member name="M:Hypertable.MutatorSpec.ToString">
            <summary>
Returns a string that represents the current object.
</summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:Hypertable.MutatorSpec.#ctor(Hypertable.MutatorKind)">
            <summary>
Initializes a new instance of the MutatorSpec class using the specified mutator kind.
</summary>
            <param name="mutatorKind">Mutator kind.</param>
            <seealso cref="P:Hypertable.MutatorSpec.MutatorKind" />
        </member>
        <member name="M:Hypertable.MutatorSpec.#ctor">
            <summary>
Initializes a new instance of the MutatorSpec class.
</summary>
        </member>
        <member name="P:Hypertable.MutatorSpec.Flags">
            <summary>
Gets or sets the table mutator flags.
</summary>
        </member>
        <member name="P:Hypertable.MutatorSpec.Capacity">
            <summary>
Gets or sets the bounded size of the blocking queue, only for queued mutator.
</summary>
            <remarks>Set to zero (default value) for an unbounded blocking queue.</remarks>
        </member>
        <member name="P:Hypertable.MutatorSpec.Queued">
            <summary>
Gets or sets a value that indicates whether to create a queued or synchronous mutator.
</summary>
        </member>
        <member name="P:Hypertable.MutatorSpec.FlushEachChunk">
            <summary>
Gets or sets a value that indicates whether each chunk should be flushed or not, only for chunked mutator.
</summary>
            <seealso cref="P:Hypertable.MutatorSpec.MutatorKind" />
        </member>
        <member name="P:Hypertable.MutatorSpec.MaxCellCountDefault">
            <summary>
Gets or sets the default maximum cell count for a chunk, only for chunked mutator.
</summary>
            <remarks>Defaults to 4096</remarks>
            <seealso cref="P:Hypertable.MutatorSpec.MutatorKind" />
        </member>
        <member name="P:Hypertable.MutatorSpec.MaxCellCount">
            <summary>
Gets or sets the maximum cell count for a chunk, only for chunked mutator.
</summary>
            <remarks>Defaults to 4096</remarks>
            <seealso cref="P:Hypertable.MutatorSpec.MutatorKind" />
        </member>
        <member name="P:Hypertable.MutatorSpec.MaxChunkSizeDefault">
            <summary>
Gets or sets the default value for the maximum chunk size in bytes, only for chunked mutator.
</summary>
            <remarks>Defaults to 64kB</remarks>
            <seealso cref="P:Hypertable.MutatorSpec.MutatorKind" />
        </member>
        <member name="P:Hypertable.MutatorSpec.MaxChunkSize">
            <summary>
Gets or sets the maximum chunk size in bytes, only for chunked mutator.
</summary>
            <remarks>Defaults to 64kB</remarks>
            <seealso cref="P:Hypertable.MutatorSpec.MutatorKind" />
        </member>
        <member name="P:Hypertable.MutatorSpec.FlushInterval">
            <summary>
Gets or sets the periodic flush interval, if zero periodic flush is disabled.
</summary>
            <remark>The periodic flush interval will be ignored for asynchronous mutators.</remark>
        </member>
        <member name="P:Hypertable.MutatorSpec.Timeout">
            <summary>
Gets or sets the maximum time to allow mutator methods to execute before time out, if zero timeout is disabled.
</summary>
        </member>
        <member name="P:Hypertable.MutatorSpec.MutatorKind">
            <summary>
Gets or sets the mutator kind.
</summary>
            <seealso cref="P:Hypertable.MutatorSpec.MutatorKind" />
        </member>
        <member name="T:Hypertable.MutatorSpec">
            <summary>
Represents a table mutator specification.
</summary>
            <example>
The following example shows how to create a chunked mutator.
<code>
MutatorSpec mutatorSpec = MutatorSpec.CreateChunked();
mutatorSpec.FlushEachChunk = true;
using( var mutator = table.CreateMutator(mutatorSpec) ) {
   // do something
}
</code>
The following example shows how to create a queued mutator.
<code>
using( var mutator = table.CreateMutator(MutatorSpec.CreateQueued()) ) {
   // do something
}
</code></example>
            <seealso cref="T:Hypertable.ITable" />
        </member>
        <member name="T:Hypertable.MutatorFlags">
            <summary>
Specifies possible table mutator flag values.
</summary>
            <seealso cref="T:Hypertable.MutatorSpec" />
        </member>
        <member name="F:Hypertable.MutatorFlags.IgnoreUnknownCf">
            <summary>
Indicates whether to ignore unknown column families or not.
</summary>
        </member>
        <member name="F:Hypertable.MutatorFlags.NoLogSync">
            <summary>
Indicates whether to force a commit log sync on update or not.
</summary>
        </member>
        <member name="F:Hypertable.MutatorFlags.Default">
            <summary>
Default behaviour.
</summary>
        </member>
        <member name="T:ht4c.Common.MutatorFlags">
            <summary>
Specifies possible table mutator flag values.
</summary>
        </member>
        <member name="T:Hypertable.MutatorKind">
            <summary>
Specifies mutator kinds.
</summary>
            <remarks>
Mutator kind is used if creating a table mutator.
</remarks>
            <seealso cref="T:Hypertable.MutatorSpec" />
            <seealso cref="T:Hypertable.ITable" />
        </member>
        <member name="F:Hypertable.MutatorKind.Chunked">
            <summary>
Chunked mutator, flushes a chunk of cells if a certain limit has been reached.
</summary>
        </member>
        <member name="F:Hypertable.MutatorKind.Default">
            <summary>
Default mutator.
</summary>
        </member>
        <member name="M:ht4c.Common.TableMutator.#ctor">
            <summary>
Creates a new TableMutator instance.
</summary>
        </member>
        <member name="M:ht4c.Common.TableMutator.flush">
            <summary>
Flushes the accumulated mutations.
</summary>
        </member>
        <member name="M:ht4c.Common.TableMutator.del(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt64)">
            <summary>
Deletes an entire row, a column family in a particular row, or a specific cell within a row.
</summary>
            <param name="row">Row key, mandatory</param>
            <param name="columnFamily">Column family, might be NULL</param>
            <param name="columnQualifier">Column qualifier, might be NULL</param>
            <param name="timestamp">Timestamp, if specified cells older or equal will be deleted</param>
        </member>
        <member name="M:ht4c.Common.TableMutator.set(ht4c.Common.Cells!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Inserts a cell collection into the table.
</summary>
            <param name="cells">Cell collection</param>
        </member>
        <member name="M:ht4c.Common.TableMutator.set(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt64,System.Void!System.Runtime.CompilerServices.IsConst*,System.UInt32,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Inserts a new cell into the table, auto generate the row key.
</summary>
            <param name="columnFamily">Column family, mandatory</param>
            <param name="columnQualifier">Column qualifier, might be NULL</param>
            <param name="timestamp">Timestamp, auto-assigned if 0</param>
            <param name="value">Cell value, might be NULL</param>
            <param name="valueLength">Cell value length</param>
            <param name="row">Receives the auto generated row key, base85 encode GUID</param>
        </member>
        <member name="M:ht4c.Common.TableMutator.set(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt64,System.Void!System.Runtime.CompilerServices.IsConst*,System.UInt32,System.Byte)">
            <summary>
Inserts a new cell into the table.
</summary>
            <param name="row">Row key, mandatory</param>
            <param name="columnFamily">Column family, mandatory</param>
            <param name="columnQualifier">Column qualifier, might be NULL</param>
            <param name="timestamp">Timestamp, auto-assigned if 0</param>
            <param name="value">Cell value, might be NULL</param>
            <param name="valueLength">Cell value length</param>
            <param name="flag">Cell flag</param>
        </member>
        <member name="M:ht4c.Common.TableMutator.Dispose">
            <summary>
Destroys the TableMutator instance.
</summary>
        </member>
        <member name="T:ht4c.Common.TableMutator">
            <summary>
Abstract class represents a table mutator.
</summary>
        </member>
        <member name="M:Hypertable.TableMutator.Finalize">
            <summary>
Clean up all unmanaged resources.
</summary>
        </member>
        <member name="M:Hypertable.TableMutator.Dispose">
            <summary>
Clean up all managed and unmanaged resources.
</summary>
        </member>
        <member name="T:Hypertable.TableMutator">
            <summary>
Represents a table mutator.
</summary>
            <seealso cref="T:Hypertable.ITableMutator" />
        </member>
        <member name="M:ht4c.Common.Properties.addOrUpdate(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Adds or updates the property value for a particular property name.
</summary>
            <param name="name">Property name</param>
            <param name="value">Property value</param>
            <returns>true if the value has been added, false idf the value has been updated</returns>
        </member>
        <member name="M:ht4c.Common.Properties.get(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Gets the property value for a particular property name.
</summary>
            <param name="name">Property name</param>
            <param name="value">Receives the property value</param>
            <returns>true if succeeded</returns>
        </member>
        <member name="M:ht4c.Common.Properties.type(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Returns the type info for a particular property.
</summary>
            <returns>Property type info</returns>
            <remarks>Returns typeid(void) if the property does not exist.</remarks>
        </member>
        <member name="M:ht4c.Common.Properties.names(std.vector&lt;std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Returns all property names.
</summary>
            <param name="names">Receives all property names</param>
        </member>
        <member name="M:ht4c.Common.Properties.clear">
            <summary>
Remove all properties.
</summary>
        </member>
        <member name="M:ht4c.Common.Properties.Dispose">
            <summary>
Destroys the Cell instance.
</summary>
        </member>
        <member name="M:ht4c.Common.Properties.create">
            <summary>
Creates a new Properties instance.
</summary>
            <returns>New Properties instance</returns>
            <remarks>To free the created instance, use the delete operator.</remarks>
        </member>
        <member name="T:ht4c.Common.Properties">
            <summary>
Represents a typed key/value map, used for configuration parameters.
</summary>
            <remarks>Links between native and C++/CLI.</remarks>
        </member>
        <member name="F:ht4c.Common.Config.ComposablePartCatalogs">
            <summary>
Composable part catalog (only used for MEF composition).
</summary>
        </member>
        <member name="F:ht4c.Common.Config.SQLiteSynchronousAlias">
            <summary>
SQLite synchronous alias.
</summary>
        </member>
        <member name="F:ht4c.Common.Config.SQLiteSynchronous">
            <summary>
SQLite synchronous.
</summary>
        </member>
        <member name="F:ht4c.Common.Config.SQLitePageSizeKBAlias">
            <summary>
SQLite db page size alias.
</summary>
        </member>
        <member name="F:ht4c.Common.Config.SQLitePageSizeKB">
            <summary>
SQLite db page size [KB].
</summary>
        </member>
        <member name="F:ht4c.Common.Config.SQLiteCacheSizeMBAlias">
            <summary>
SQLite db cache size [MB] alias.
</summary>
        </member>
        <member name="F:ht4c.Common.Config.SQLiteCacheSizeMB">
            <summary>
SQLite db cache size [MB].
</summary>
        </member>
        <member name="F:ht4c.Common.Config.SQLiteFilenameAlias">
            <summary>
SQLite db filename alias.
</summary>
        </member>
        <member name="F:ht4c.Common.Config.SQLiteFilename">
            <summary>
SQLite db filename.
</summary>
        </member>
        <member name="F:ht4c.Common.Config.HamsterPageSizeKBAlias">
            <summary>
Hamster db page size alias.
</summary>
        </member>
        <member name="F:ht4c.Common.Config.HamsterPageSizeKB">
            <summary>
Hamster db page size [KB], multiple of 64KB.
</summary>
        </member>
        <member name="F:ht4c.Common.Config.HamsterCacheSizeMBAlias">
            <summary>
Hamster db cache size [MB] alias.
</summary>
        </member>
        <member name="F:ht4c.Common.Config.HamsterCacheSizeMB">
            <summary>
Hamster db cache size [MB].
</summary>
        </member>
        <member name="F:ht4c.Common.Config.HamsterMaxTablesAlias">
            <summary>
Hamster db maximum table limit alias.
</summary>
        </member>
        <member name="F:ht4c.Common.Config.HamsterMaxTables">
            <summary>
Hamster db maximum table limit.
</summary>
        </member>
        <member name="F:ht4c.Common.Config.HamsterEnableAutoRecoveryAlias">
            <summary>
Hamster db enable auto recovery alias.
</summary>
        </member>
        <member name="F:ht4c.Common.Config.HamsterEnableAutoRecovery">
            <summary>
Hamster db enable auto recovery.
</summary>
        </member>
        <member name="F:ht4c.Common.Config.HamsterEnableRecoveryAlias">
            <summary>
Hamster db enable recovery alias.
</summary>
        </member>
        <member name="F:ht4c.Common.Config.HamsterEnableRecovery">
            <summary>
Hamster db enable recovery.
</summary>
        </member>
        <member name="F:ht4c.Common.Config.HamsterFilenameAlias">
            <summary>
Hamster db filename alias.
</summary>
        </member>
        <member name="F:ht4c.Common.Config.HamsterFilename">
            <summary>
Hamster db filename.
</summary>
        </member>
        <member name="F:ht4c.Common.Config.ConnectionTimeoutAlias">
            <summary>
Connection timeout [ms] alias.
</summary>
        </member>
        <member name="F:ht4c.Common.Config.ConnectionTimeout">
            <summary>
Connection timeout [ms]
</summary>
        </member>
        <member name="F:ht4c.Common.Config.UriAlias">
            <summary>
Uri alias.
</summary>
        </member>
        <member name="F:ht4c.Common.Config.Uri">
            <summary>
Uri, hostname:port.
</summary>
        </member>
        <member name="F:ht4c.Common.Config.ProviderSQLite">
            <summary>
Provider name value - SQLite.
</summary>
        </member>
        <member name="F:ht4c.Common.Config.ProviderHamster">
            <summary>
Provider name value - Hamster.
</summary>
        </member>
        <member name="F:ht4c.Common.Config.ProviderThrift">
            <summary>
Provider name value - Thrift.
</summary>
        </member>
        <member name="F:ht4c.Common.Config.ProviderHyper">
            <summary>
Provider name value - Hyper.
</summary>
        </member>
        <member name="F:ht4c.Common.Config.ProviderNameAlias">
            <summary>
Provider name alias.
</summary>
        </member>
        <member name="F:ht4c.Common.Config.ProviderName">
            <summary>
Provider name.
</summary>
        </member>
        <member name="T:ht4c.Common.Config">
            <summary>
Represents various configuration and connection string options.
</summary>
        </member>
        <member name="P:Hypertable.Composition.IContextProviderMetadata.ProviderName">
            <summary>
Gets the context provider name.
</summary>
        </member>
        <member name="T:Hypertable.Composition.IContextProviderMetadata">
            <summary>
Represents metadata for the context provider export.
</summary>
            <seealso cref="T:Hypertable.Composition.IContextProvider" />
            <seealso cref="T:Hypertable.Composition.ExportContextProviderAttribute" />
        </member>
        <member name="P:Hypertable.Composition.IContextProvider.Provider">
            <summary>
Gets the context provider.
</summary>
        </member>
        <member name="T:Hypertable.Composition.IContextProvider">
            <summary>
Represents a Hypertable context provider.
</summary>
            <example>
The following example shows how to export a context provider.
<code>
using System;
using System.Collections.Generic;
using Hypertable.Composition;

[ExportContextProvider("SampleContextProvider")]
public class SampleContextProvider : IContextProvider
{
    public Func&lt;IDictionary&lt;string, object&gt;, IContext&gt; Provider {
        get {
            return (properties) =&gt; new SampleContext(properties);
        }
    }
}

void foo() {
   // set the "Hypertable.Composition.ComposablePartCatalogs" property which expects
   // a ComposablePartCatalog or an IEnumerable&lt;ComposablePartCatalog&gt;
   var properties = new Dictionary&lt;string, object&gt;
      {
         { "Hypertable.Composition.ComposablePartCatalogs", new AssemblyCatalog(GetAssembly(this.GetType())) }
      };
   using (var context = Context.Create("Provider=TestContextProvider", properties)) {
      // use the context
   }
}
</code></example>
            <seealso cref="T:Hypertable.IContext" />
        </member>
        <member name="M:ht4c.Common.ScanSpec.clear">
            <summary>
Reset scan definition.
</summary>
        </member>
        <member name="M:ht4c.Common.ScanSpec.addCellInterval(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Boolean,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Boolean)">
            <summary>
Add cell interval to be included in the scan.
</summary>
            <param name="startRow">Start row key</param>
            <param name="startColumn">Start column</param>
            <param name="includeStartRow">If true the start row will be include</param>
            <param name="endRow">Start row key</param>
            <param name="endColumn">End column</param>
            <param name="includeEndRow">If true the start row will be include</param>
            <remarks>Column is defined as column family[:column qualifier]</remarks>
        </member>
        <member name="M:ht4c.Common.ScanSpec.addRowInterval(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Boolean,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Boolean)">
            <summary>
Add row interval to be included in the scan.
</summary>
            <param name="startRow">Start row key</param>
            <param name="includeStartRow">If true the start row will be include</param>
            <param name="endRow">Start row key</param>
            <param name="includeEndRow">If true the start row will be include</param>
        </member>
        <member name="M:ht4c.Common.ScanSpec.addCell(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Add particular cell to be included in the scan.
</summary>
            <param name="row">Row key</param>
            <param name="column">Column</param>
            <remarks>Column is defined as column family[:column qualifier]</remarks>
        </member>
        <member name="M:ht4c.Common.ScanSpec.reserveCells(System.Int32)">
            <summary>
Sets the capacity for a bunch of cells.
</summary>
            <param name="reserveCells">Capacity to reserve</param>
        </member>
        <member name="M:ht4c.Common.ScanSpec.addColumnPredicate(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt32)">
            <summary>
Adda a column predicate to the scan.
</summary>
            <param name="columnFamily">Column family</param>
            <param name="match">Prefix or exact match</param>
            <param name="value">Value to match</param>
            <param name="valueLength">Value length</param>
        </member>
        <member name="M:ht4c.Common.ScanSpec.addColumn(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Add column to be included in the scan.
</summary>
            <param name="column">Column</param>
            <remarks>Column is defined as column family[:column qualifier]</remarks>
        </member>
        <member name="M:ht4c.Common.ScanSpec.reserveColumns(System.Int32)">
            <summary>
Sets the capacity for a bunch of column.
</summary>
            <param name="reserveColumns">Capacity to reserve</param>
        </member>
        <member name="M:ht4c.Common.ScanSpec.addRow(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Add row key to be included in the scan.
</summary>
            <param name="row">Row key</param>
        </member>
        <member name="M:ht4c.Common.ScanSpec.reserveRows(System.Int32)">
            <summary>
Sets the capacity for a bunch of row keys.
</summary>
            <param name="reserveRows">Capacity to reserve</param>
        </member>
        <member name="M:ht4c.Common.ScanSpec.valueRegex(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Sets the regexp to filter by cell values.
</summary>
            <param name="regex">Cell value regexp</param>
        </member>
        <member name="M:ht4c.Common.ScanSpec.rowRegex(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Sets the regexp to filter by row keys.
</summary>
            <param name="regex">Row key regexp</param>
        </member>
        <member name="M:ht4c.Common.ScanSpec.endTimestamp(System.UInt64)">
            <summary>
Sets the end time of time interval for the scan.
</summary>
            <param name="end">End time of time interval</param>
            <remarks>Time values represent number of nanoseconds from 1970-01-00 00:00:00.0 UTC</remarks>
        </member>
        <member name="M:ht4c.Common.ScanSpec.startTimestamp(System.UInt64)">
            <summary>
Sets the start time of time interval for the scan.
</summary>
            <param name="start">Start time of time interval</param>
            <remarks>Time values represent number of nanoseconds from 1970-01-00 00:00:00.0 UTC</remarks>
        </member>
        <member name="M:ht4c.Common.ScanSpec.scanAndFilter(System.Boolean)">
            <summary>
If set scans use scan and filter rows to get many individual rows.
</summary>
            <param name="scanAndFilter">Use scan and filter rows</param>
        </member>
        <member name="M:ht4c.Common.ScanSpec.keysOnly(System.Boolean)">
            <summary>
If set scans return only keys, no cell values.
</summary>
            <param name="keysOnly">If true scans return onlt keys</param>
        </member>
        <member name="M:ht4c.Common.ScanSpec.cellOffset(System.Int32)">
            <summary>
Sets the number of cells to be skipped at the beginning of the query.
</summary>
            <param name="cells">Number of cells to be skipped</param>
            <remarks>Not valid in combination of row offset</remarks>
        </member>
        <member name="M:ht4c.Common.ScanSpec.rowOffset(System.Int32)">
            <summary>
Sets the number of rows to be skipped at the beginning of the query.
</summary>
            <param name="rows">Number of rows to be skipped</param>
            <remarks>Not valid in combination of cell offset</remarks>
        </member>
        <member name="M:ht4c.Common.ScanSpec.maxCellsColumnFamily(System.Int32)">
            <summary>
Sets the maximum number of cells to return per column family and row.
</summary>
            <param name="maxCells">Maximum number of cells to return per column family and row</param>
        </member>
        <member name="M:ht4c.Common.ScanSpec.maxCells(System.Int32)">
            <summary>
Sets the maximum number of cells to return.
</summary>
            <param name="maxCells">Maximum number of cells to return</param>
        </member>
        <member name="M:ht4c.Common.ScanSpec.maxVersions(System.Int32)">
            <summary>
Sets the maximum number of revisions of each cell to return in the scan.
</summary>
            <param name="maxVersion">Maximum number of revisions of each cell to return in the scan</param>
        </member>
        <member name="M:ht4c.Common.ScanSpec.maxRows(System.Int32)">
            <summary>
Sets the maximum number of rows to return in the scan.
</summary>
            <param name="maxRows">Maximum number of rows to return in the scan</param>
        </member>
        <member name="M:ht4c.Common.ScanSpec.Dispose">
            <summary>
Destroys the ScanSpec instance.
</summary>
        </member>
        <member name="M:ht4c.Common.ScanSpec.create">
            <summary>
Creates a new ScanSpec instance.
</summary>
            <returns>New ScanSpec instance</returns>
            <remarks>To free the created instance, use the delete operator.</remarks>
        </member>
        <member name="T:ht4c.Common.ScanSpec">
            <summary>
Represents a Hypertable scan specification.
</summary>
            <remarks>Links between native and C++/CLI.</remarks>
        </member>
        <member name="M:Hypertable.CellInterval.op_GreaterThan(Hypertable.CellInterval,Hypertable.CellInterval)">
            <summary>
Determines whether one specified cell interval is greater than the other.
</summary>
            <param name="x">The first cell interval to compare, or null.</param>
            <param name="y">The second cell interval to compare, or null.</param>
            <returns>true if the value of x is greater than the value of y, otherwise false.</returns>
        </member>
        <member name="M:Hypertable.CellInterval.op_LessThan(Hypertable.CellInterval,Hypertable.CellInterval)">
            <summary>
Determines whether one specified cell interval is less than the other.
</summary>
            <param name="x">The first cell interval to compare, or null.</param>
            <param name="y">The second cell interval to compare, or null.</param>
            <returns>true if the value of x is less than the value of y, otherwise false.</returns>
        </member>
        <member name="M:Hypertable.CellInterval.op_Inequality(Hypertable.CellInterval,Hypertable.CellInterval)">
            <summary>
Determines whether two specified cell intervals are different.
</summary>
            <param name="x">The first cell interval to compare, or null.</param>
            <param name="y">The second cell interval to compare, or null.</param>
            <returns>true if the value of x is different as the value of y, otherwise false.</returns>
        </member>
        <member name="M:Hypertable.CellInterval.op_Equality(Hypertable.CellInterval,Hypertable.CellInterval)">
            <summary>
Determines whether two specified cell intervals are equal.
</summary>
            <param name="x">The first cell interval to compare, or null.</param>
            <param name="y">The second cell interval to compare, or null.</param>
            <returns>true if the value of x is the same as the value of y, otherwise false.</returns>
        </member>
        <member name="M:Hypertable.CellInterval.Compare(Hypertable.CellInterval,Hypertable.CellInterval)">
            <summary>
Compares two specified cell intervals and returns an integer that indicates their relative position in the sort order.
</summary>
            <param name="x">The first cell interval to compare, or null.</param>
            <param name="y">The second cell interval to compare, or null.</param>
            <returns>
Signed integer that indicates the relationship between the two comparands:
<table class="comment"><tr><td>&lt; 0</td><td>if x is less than y</td></tr><tr><td>= 0</td><td>if x equals y</td></tr><tr><td>&gt; 0</td><td>if x is greater than y</td></tr></table></returns>
        </member>
        <member name="M:Hypertable.CellInterval.Clone">
            <summary>
Creates a new object that is a copy of this instance.
</summary>
            <returns>A new CellInterval instance equal to this instance.</returns>
        </member>
        <member name="M:Hypertable.CellInterval.ToString">
            <summary>
Returns a string that represents the current object.
</summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:Hypertable.CellInterval.GetHashCode">
            <summary>
Returns the hash code for this CellInterval.
</summary>
            <returns>Signed hash code.</returns>
        </member>
        <member name="M:Hypertable.CellInterval.Equals(System.Object)">
            <summary>
Determines whether this instance and a specified object, which must also be a CellInterval object, equals.
</summary>
            <param name="obj">Cell interval to compare, or null.</param>
            <returns>true if the value of obj is the same as the value of this instance, otherwise false.</returns>
        </member>
        <member name="M:Hypertable.CellInterval.Equals(Hypertable.CellInterval)">
            <summary>
Determines whether this instance and an other CellInterval object equals.
</summary>
            <param name="other">Cell interval to compare, or null.</param>
            <returns>true if the value of obj is the same as the value of this instance, otherwise false.</returns>
        </member>
        <member name="M:Hypertable.CellInterval.CompareTo(Hypertable.CellInterval)">
            <summary>
Compares this instance with a specified CellInterval object and indicates whether this instance precedes, follows,
or appears in the same position in the sort order as the specified CellInterval.
</summary>
            <param name="other">Cell interval to compare, or null.</param>
            <returns>
Signed integer that indicates the relationship between the comparand and this instance:
<table class="comment"><tr><td>&lt; 0</td><td>if this instance precedes other.</td></tr><tr><td>= 0</td><td>if this instance equals other.</td></tr><tr><td>&gt; 0</td><td>if this instance follows other.</td></tr></table></returns>
        </member>
        <member name="P:Hypertable.CellInterval.EndColumnQualifier">
            <summary>
Gets or sets the end column qualifier.
</summary>
        </member>
        <member name="P:Hypertable.CellInterval.EndColumnFamily">
            <summary>
Gets or sets the end column family.
</summary>
        </member>
        <member name="P:Hypertable.CellInterval.StartColumnQualifier">
            <summary>
Gets or sets the start column qualifier.
</summary>
        </member>
        <member name="P:Hypertable.CellInterval.StartColumnFamily">
            <summary>
Gets or sets the start column family.
</summary>
        </member>
        <member name="M:Hypertable.CellInterval.#ctor(Hypertable.CellInterval)">
            <summary>
Initializes a new instance of the CellInterval class that is a copy of the specified instance.
</summary>
            <param name="cellInterval">Cell interval to copy.</param>
        </member>
        <member name="M:Hypertable.CellInterval.#ctor(System.String,System.String,System.String,System.Boolean,System.String,System.String,System.String,System.Boolean)">
            <summary>
Initializes a new instance of the CellInterval class using start/end cell.
</summary>
            <param name="startRow">Start row, might be null if unspecified.</param>
            <param name="startColumnFamily">Start column family.</param>
            <param name="startColumnQualifier">Start column qualifier.</param>
            <param name="includeStartRow">Value that indicates whether the start row should be included.</param>
            <param name="endRow">End row, might be null if unspecified.</param>
            <param name="endColumnFamily">End column family.</param>
            <param name="endColumnQualifier">End column qualifier.</param>
            <param name="includeEndRow">Value that indicates whether the end row should be included.</param>
        </member>
        <member name="M:Hypertable.CellInterval.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
Initializes a new instance of the CellInterval class using start/end cell.
</summary>
            <param name="startRow">Start row, might be null if unspecified.</param>
            <param name="startColumnFamily">Start column family.</param>
            <param name="startColumnQualifier">Start column qualifier.</param>
            <param name="endRow">End row, might be null if unspecified.</param>
            <param name="endColumnFamily">End column family.</param>
            <param name="endColumnQualifier">End column qualifier.</param>
        </member>
        <member name="M:Hypertable.CellInterval.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
Initializes a new instance of the CellInterval class using start/end row and start/end column family.
</summary>
            <param name="startRow">Start row, might be null if unspecified.</param>
            <param name="startColumnFamily">Start column family.</param>
            <param name="endRow">End row, might be null if unspecified.</param>
            <param name="endColumnFamily">End column family.</param>
        </member>
        <member name="M:Hypertable.CellInterval.#ctor">
            <summary>
Initializes a new instance of the CellInterval class.
</summary>
        </member>
        <member name="T:Hypertable.CellInterval">
            <summary>
Represents a cell interval.
</summary>
        </member>
        <member name="M:Hypertable.RowInterval.op_GreaterThan(Hypertable.RowInterval,Hypertable.RowInterval)">
            <summary>
Determines whether one specified row interval is greater than the other.
</summary>
            <param name="x">The first row interval to compare, or null.</param>
            <param name="y">The second row interval to compare, or null.</param>
            <returns>true if the value of x is greater than the value of y, otherwise false.</returns>
        </member>
        <member name="M:Hypertable.RowInterval.op_LessThan(Hypertable.RowInterval,Hypertable.RowInterval)">
            <summary>
Determines whether one specified row interval is less than the other.
</summary>
            <param name="x">The first row interval to compare, or null.</param>
            <param name="y">The second row interval to compare, or null.</param>
            <returns>true if the value of x is less than the value of y, otherwise false.</returns>
        </member>
        <member name="M:Hypertable.RowInterval.op_Inequality(Hypertable.RowInterval,Hypertable.RowInterval)">
            <summary>
Determines whether two specified row intervals are different.
</summary>
            <param name="x">The first row interval to compare, or null.</param>
            <param name="y">The second row interval to compare, or null.</param>
            <returns>true if the value of x is different as the value of y, otherwise false.</returns>
        </member>
        <member name="M:Hypertable.RowInterval.op_Equality(Hypertable.RowInterval,Hypertable.RowInterval)">
            <summary>
Determines whether two specified row intervals are equal.
</summary>
            <param name="x">The first row interval to compare, or null.</param>
            <param name="y">The second row interval to compare, or null.</param>
            <returns>true if the value of x is the same as the value of y, otherwise false.</returns>
        </member>
        <member name="M:Hypertable.RowInterval.Compare(Hypertable.RowInterval,Hypertable.RowInterval)">
            <summary>
Compares two specified row intervals and returns an integer that indicates their relative position in the sort order.
</summary>
            <param name="x">The first row interval to compare, or null.</param>
            <param name="y">The second row interval to compare, or null.</param>
            <returns>
Signed integer that indicates the relationship between the two comparands:
<table class="comment"><tr><td>&lt; 0</td><td>if x is less than y</td></tr><tr><td>= 0</td><td>if x equals y</td></tr><tr><td>&gt; 0</td><td>if x is greater than y</td></tr></table></returns>
        </member>
        <member name="M:Hypertable.RowInterval.Clone">
            <summary>
Creates a new object that is a copy of this instance.
</summary>
            <returns>A new RowInterval instance equal to this instance.</returns>
        </member>
        <member name="M:Hypertable.RowInterval.ToString">
            <summary>
Returns a string that represents the current object.
</summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:Hypertable.RowInterval.GetHashCode">
            <summary>
Returns the hash code for this RowInterval.
</summary>
            <returns>Signed hash code.</returns>
        </member>
        <member name="M:Hypertable.RowInterval.Equals(System.Object)">
            <summary>
Determines whether this instance and a specified object, which must also be a RowInterval object, equals.
</summary>
            <param name="obj">Row interval to compare, or null.</param>
            <returns>true if the value of obj is the same as the value of this instance, otherwise false.</returns>
        </member>
        <member name="M:Hypertable.RowInterval.Equals(Hypertable.RowInterval)">
            <summary>
Determines whether this instance and an other RowInterval object equals.
</summary>
            <param name="other">RowInterval to compare, or null.</param>
            <returns>true if the value of obj is the same as the value of this instance, otherwise false.</returns>
        </member>
        <member name="M:Hypertable.RowInterval.CompareTo(Hypertable.RowInterval)">
            <summary>
Compares this instance with a specified RowInterval object and indicates whether this instance precedes, follows,
or appears in the same position in the sort order as the specified RowInterval.
</summary>
            <param name="other">Row interval to compare, or null.</param>
            <returns>
Signed integer that indicates the relationship between the comparand and this instance:
<table class="comment"><tr><td>&lt; 0</td><td>if this instance precedes other.</td></tr><tr><td>= 0</td><td>if this instance equals other.</td></tr><tr><td>&gt;</td><td>0 if this instance follows other.</td></tr></table></returns>
        </member>
        <member name="P:Hypertable.RowInterval.IncludeEndRow">
            <summary>
Gets or sets a value that indicates whether the end row should be included.
</summary>
        </member>
        <member name="P:Hypertable.RowInterval.EndRow">
            <summary>
Gets or sets the end row.
</summary>
        </member>
        <member name="P:Hypertable.RowInterval.IncludeStartRow">
            <summary>
Gets or sets a value that indicates whether the start row should be included.
</summary>
        </member>
        <member name="P:Hypertable.RowInterval.StartRow">
            <summary>
Gets or sets the start row.
</summary>
        </member>
        <member name="M:Hypertable.RowInterval.#ctor(Hypertable.RowInterval)">
            <summary>
Initializes a new instance of the RowInterval class that is a copy of the specified instance.
</summary>
            <param name="rowInterval">Row interval to copy.</param>
        </member>
        <member name="M:Hypertable.RowInterval.#ctor(System.String,System.Boolean,System.String,System.Boolean)">
            <summary>
Initializes a new instance of the RowInterval class using start/end row.
</summary>
            <param name="startRow">Start row, might be null if unspecified.</param>
            <param name="includeStartRow">Value that indicates whether the start row should be included.</param>
            <param name="endRow">End row, might be null if unspecified.</param>
            <param name="includeEndRow">Value that indicates whether the end row should be included.</param>
        </member>
        <member name="M:Hypertable.RowInterval.#ctor(System.String,System.String)">
            <summary>
Initializes a new instance of the RowInterval class using start/end row.
</summary>
            <param name="startRow">Start row, might be null if unspecified.</param>
            <param name="endRow">End row, might be null if unspecified.</param>
        </member>
        <member name="M:Hypertable.RowInterval.#ctor">
            <summary>
Initializes a new instance of the RowInterval class.
</summary>
        </member>
        <member name="T:Hypertable.RowInterval">
            <summary>
Represents a row interval.
</summary>
        </member>
        <member name="M:Hypertable.ColumnPredicate.op_GreaterThan(Hypertable.ColumnPredicate,Hypertable.ColumnPredicate)">
            <summary>
Determines whether one specified row interval is greater than the other.
</summary>
            <param name="x">The first row interval to compare, or null.</param>
            <param name="y">The second row interval to compare, or null.</param>
            <returns>true if the value of x is greater than the value of y, otherwise false.</returns>
        </member>
        <member name="M:Hypertable.ColumnPredicate.op_LessThan(Hypertable.ColumnPredicate,Hypertable.ColumnPredicate)">
            <summary>
Determines whether one specified row interval is less than the other.
</summary>
            <param name="x">The first row interval to compare, or null.</param>
            <param name="y">The second row interval to compare, or null.</param>
            <returns>true if the value of x is less than the value of y, otherwise false.</returns>
        </member>
        <member name="M:Hypertable.ColumnPredicate.op_Inequality(Hypertable.ColumnPredicate,Hypertable.ColumnPredicate)">
            <summary>
Determines whether two specified row intervals are different.
</summary>
            <param name="x">The first row interval to compare, or null.</param>
            <param name="y">The second row interval to compare, or null.</param>
            <returns>true if the value of x is different as the value of y, otherwise false.</returns>
        </member>
        <member name="M:Hypertable.ColumnPredicate.op_Equality(Hypertable.ColumnPredicate,Hypertable.ColumnPredicate)">
            <summary>
Determines whether two specified row intervals are equal.
</summary>
            <param name="x">The first row interval to compare, or null.</param>
            <param name="y">The second row interval to compare, or null.</param>
            <returns>true if the value of x is the same as the value of y, otherwise false.</returns>
        </member>
        <member name="M:Hypertable.ColumnPredicate.Compare(Hypertable.ColumnPredicate,Hypertable.ColumnPredicate)">
            <summary>
Compares two specified column predicates and returns an integer that indicates their relative position in the sort order.
</summary>
            <param name="x">The first column predicate to compare, or null.</param>
            <param name="y">The second column predicate to compare, or null.</param>
            <returns>
Signed integer that indicates the relationship between the two comparands:
<table class="comment"><tr><td>&lt; 0</td><td>if x is less than y</td></tr><tr><td>= 0</td><td>if x equals y</td></tr><tr><td>&gt; 0</td><td>if x is greater than y</td></tr></table></returns>
        </member>
        <member name="M:Hypertable.ColumnPredicate.Clone">
            <summary>
Creates a new object that is a copy of this instance.
</summary>
            <returns>A new ColumnPredicate instance equal to this instance.</returns>
        </member>
        <member name="M:Hypertable.ColumnPredicate.ToString">
            <summary>
Returns a string that represents the current object.
</summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:Hypertable.ColumnPredicate.GetHashCode">
            <summary>
Returns the hash code for this ColumnPredicate.
</summary>
            <returns>Signed hash code.</returns>
        </member>
        <member name="M:Hypertable.ColumnPredicate.Equals(System.Object)">
            <summary>
Determines whether this instance and a specified object, which must also be a ColumnPredicate object, equals.
</summary>
            <param name="obj">Column predicate to compare, or null.</param>
            <returns>true if the value of obj is the same as the value of this instance, otherwise false.</returns>
        </member>
        <member name="M:Hypertable.ColumnPredicate.Equals(Hypertable.ColumnPredicate)">
            <summary>
Determines whether this instance and an other ColumnPredicate object equals.
</summary>
            <param name="other">ColumnPredicate to compare, or null.</param>
            <returns>true if the value of obj is the same as the value of this instance, otherwise false.</returns>
        </member>
        <member name="M:Hypertable.ColumnPredicate.CompareTo(Hypertable.ColumnPredicate)">
            <summary>
Compares this instance with a specified ColumnPredicate object and indicates whether this instance precedes, follows,
or appears in the same position in the sort order as the specified ColumnPredicate.
</summary>
            <param name="other">Column predicate to compare, or null.</param>
            <returns>
Signed integer that indicates the relationship between the comparand and this instance:
<table class="comment"><tr><td>&lt; 0</td><td>if this instance precedes other.</td></tr><tr><td>= 0</td><td>if this instance equals other.</td></tr><tr><td>&gt;</td><td>0 if this instance follows other.</td></tr></table></returns>
        </member>
        <member name="P:Hypertable.ColumnPredicate.SearchValue">
            <summary>
Gets or sets the search value, might be null.
</summary>
        </member>
        <member name="P:Hypertable.ColumnPredicate.Match">
            <summary>
Gets or sets the match kind.
</summary>
        </member>
        <member name="P:Hypertable.ColumnPredicate.ColumnFamily">
            <summary>
Gets or sets the column family.
</summary>
        </member>
        <member name="M:Hypertable.ColumnPredicate.#ctor(Hypertable.ColumnPredicate)">
            <summary>
Initializes a new instance of the ColumnPredicate class that is a copy of the specified instance.
</summary>
            <param name="columnPredicate">Column predicate to copy.</param>
        </member>
        <member name="M:Hypertable.ColumnPredicate.#ctor(System.String,Hypertable.MatchKind,System.Byte[])">
            <summary>
Initializes a new instance of the ColumnPredicate class using column family, match kind and search value.
</summary>
            <param name="columnFamily">Column family.</param>
            <param name="match">Defines the match kind.</param>
            <param name="searchValue">Search value.</param>
        </member>
        <member name="M:Hypertable.ColumnPredicate.#ctor">
            <summary>
Initializes a new instance of the ColumnPredicate class.
</summary>
        </member>
        <member name="T:Hypertable.ColumnPredicate">
            <summary>
Represents a column predicate.
</summary>
        </member>
        <member name="T:Hypertable.MatchKind">
            <summary>
Specifies match kinds.
</summary>
            <remarks>
Match kind is used on column predicates.
</remarks>
            <seealso cref="T:Hypertable.ColumnPredicate" />
        </member>
        <member name="F:Hypertable.MatchKind.Contains">
            <summary>
Contains.
</summary>
        </member>
        <member name="F:Hypertable.MatchKind.Prefix">
            <summary>
Prefix match for the search.
</summary>
        </member>
        <member name="F:Hypertable.MatchKind.Exact">
            <summary>
Exact match for the search.
</summary>
        </member>
        <member name="F:Hypertable.MatchKind.Undefined">
            <summary>
Undefinde
</summary>
        </member>
        <member name="M:ht4c.Thrift.ThriftBlockingAsyncResult.Dispose">
            <summary>
Destroys the ThriftBlockingAsyncResult instance.
</summary>
        </member>
        <member name="M:ht4c.Thrift.ThriftBlockingAsyncResult.create(System.UInt32)">
            <summary>
Creates a new ThriftBlockingAsyncResult instance.
</summary>
            <param name="capacity">Capacity in bytes of result queue. If zero then the queue capacity will be unbounded.</param>
            <returns>New ThriftBlockingAsyncResult instance</returns>
            <remarks>To free the created instance, use the delete operator.</remarks>
        </member>
        <member name="T:ht4c.Thrift.ThriftBlockingAsyncResult">
            <summary>
Represents results from asynchronous table scan operations, using the thrift API.
</summary>
            <remarks>Links between native and C++/CLI.</remarks>
            <seealso cref="T:ht4c.Common.AsyncResult" />
        </member>
        <member name="M:ht4c.Hyper.HyperBlockingAsyncResult.Dispose">
            <summary>
Destroys the HyperBlockingAsyncResult instance.
</summary>
        </member>
        <member name="M:ht4c.Hyper.HyperBlockingAsyncResult.create(System.UInt32)">
            <summary>
Creates a new HyperBlockingAsyncResult instance.
</summary>
            <param name="capacity">Capacity in bytes of result queue. If zero then the queue capacity will be unbounded.</param>
            <returns>New HyperBlockingAsyncResult instance</returns>
            <remarks>To free the created instance, use the delete operator.</remarks>
        </member>
        <member name="T:ht4c.Hyper.HyperBlockingAsyncResult">
            <summary>
Represents results from asynchronous table scan operations, using the native hypertable API.
</summary>
            <remarks>Links between native and C++/CLI.</remarks>
            <seealso cref="T:ht4c.Common.BlockingAsyncResult" />
        </member>
        <member name="M:ht4c.Common.BlockingAsyncResult.getCells(ht4c.Common.AsyncResultSink*,System.UInt32,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Publish all cells to the asyncResultSink specified, blocks the calling thread
till there is a result available unless asynchronous operations have completed, cancelled or
a timeout occurs.
</summary>
            <param name="asyncResultSink">Receives the cells available</param>
            <param name="timeoutMsec">Time out [ms]</param>
            <param name="timedOut">Set to true if the operation has been timed out</param>
            <returns>true if all outstanding operations have been completed</returns>
        </member>
        <member name="M:ht4c.Common.BlockingAsyncResult.getCells(ht4c.Common.AsyncResultSink*)">
            <summary>
Publish all cells to the asyncResultSink specified, blocks the calling thread
till there is a result available unless asynchronous operations have completed or cancelled.
</summary>
            <param name="asyncResultSink">Receives the cells available</param>
            <returns>true if all outstanding operations have been completed</returns>
        </member>
        <member name="M:ht4c.Common.BlockingAsyncResult.isEmpty">
            <summary>
Returns true if all results have been consumed.
</summary>
        </member>
        <member name="T:ht4c.Common.BlockingAsyncResult">
            <summary>
Abstract class represents results from asynchronous table scan operations.
</summary>
        </member>
        <member name="M:Hypertable.BlockingAsyncResult.TryGetCells(System.TimeSpan,Hypertable.AsyncScannerContext@,System.Collections.Generic.IList{Hypertable.Cell}@)">
            <summary>
Gets the available cells, blocks the calling thread till there is a result available
unless asynchronous operations have completed, cancelled or a timeout occurs.
</summary>
            <param name="timeout">Timespan to wait before a timeout occurs.</param>
            <param name="asyncScannerContext">Table scanner context.</param>
            <param name="cells">Available cells. This parameter is passed uninitialized.</param>m&gt;
<returns>true if all outstanding operations have been completed.</returns><seealso cref="T:Hypertable.ITable" /></member>
        <member name="M:Hypertable.BlockingAsyncResult.TryGetCells(System.TimeSpan,System.Collections.Generic.IList{Hypertable.Cell}@)">
            <summary>
Gets the available cells, blocks the calling thread till there is a result available
unless asynchronous operations have completed, cancelled or a timeout occurs.
</summary>
            <param name="timeout">Timespan to wait before a timeout occurs.</param>
            <param name="cells">Available cells. This parameter is passed uninitialized.</param>m&gt;
<returns>true if all outstanding operations have been completed.</returns><seealso cref="T:Hypertable.ITable" /></member>
        <member name="M:Hypertable.BlockingAsyncResult.TryGetCells(Hypertable.AsyncScannerContext@,System.Collections.Generic.IList{Hypertable.Cell}@)">
            <summary>
Gets the available cells, blocks the calling thread till there is a result available
unless asynchronous operations have completed or cancelled.
</summary>
            <param name="asyncScannerContext">Table scanner context.</param>
            <param name="cells">Available cells. This parameter is passed uninitialized.</param>m&gt;
<returns>true if all outstanding operations have been completed.</returns><seealso cref="T:Hypertable.ITable" /></member>
        <member name="M:Hypertable.BlockingAsyncResult.TryGetCells(System.Collections.Generic.IList{Hypertable.Cell}@)">
            <summary>
Gets the available cells, blocks the calling thread till there is a result available
unless asynchronous operations have completed or cancelled.
</summary>
            <param name="cells">Available cells. This parameter is passed uninitialized.</param>m&gt;
<returns>true if all outstanding operations have been completed.</returns><seealso cref="T:Hypertable.ITable" /></member>
        <member name="M:Hypertable.BlockingAsyncResult.#ctor(System.UInt32)">
            <summary>
Initializes a new instance of the BlockingAsyncResult class using the specified capacity.
</summary>
            <param name="capacity">Capacity in bytes of result queue. If zero then the queue capacity will be unbounded.</param>
        </member>
        <member name="M:Hypertable.BlockingAsyncResult.#ctor">
            <summary>
Initializes a new instance of the BlockingAsyncResult class.
</summary>
        </member>
        <member name="T:Hypertable.BlockingAsyncResult">
            <summary>
Represents results from asynchronous table scan operations.
</summary>
            <example>
The following example shows how to scan a multiple tables asynchronously.
<code>
using( var asynResult = new BlockingAsyncResult() ) {
   tableA.BeginScan(asynResult);
   tableB.BeginScan(asynResult);
   AsyncScannerContext asyncScannerContext;
   IList&lt;Cell&gt; cells;
   while( asynResult.TryGetCells(out asyncScannerContext, out cells) ) {
      foreach( Cell cell in cells ) {
         // process cell
      }
   }
}
</code></example>
        </member>
        <member name="M:ht4c.Context.Dispose">
            <summary>
Destroys the Context instance.
</summary>
        </member>
        <member name="M:ht4c.Context.mergeProperties(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,ht4c.Common.Properties*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Merges the connection string with all default properties and those from a configuration file.
</summary>
            <param name="connectionString">Connection string, might be null or empty</param>
            <param name="loggingLevel">Preferred logging level, might be null or empty</param>
            <param name="properties">Configuration properties</param>
            <seealso cref="T:ht4c.Common.Properties" />
        </member>
        <member name="M:ht4c.Context.shutdown">
            <summary>
Frees resources used.
</summary>
        </member>
        <member name="M:ht4c.Context.destroy(ht4c.Context*)">
            <summary>
Destroys the Context instance.
</summary>
            <param name="ctx">Context to destroy</param>
        </member>
        <member name="M:ht4c.Context.create(ht4c.Common.Properties!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Creates a new Context instance.
</summary>
            <param name="properties">Configuration properties</param>
            <returns>New Context instance</returns>
            <remarks>To free the created instance, use the destroy method.</remarks>
            <seealso cref="T:ht4c.Common.Properties" />
        </member>
        <member name="T:ht4c.Context">
            <summary>
Represents a Hypertable context, handles connection to a Hypertable instance.
</summary>
            <remarks>Links between native and C++/CLI.</remarks>
            <seealso cref="T:ht4c.Common.Context" />
        </member>
        <member name="M:ht4c.Common.Context.hasFeature(ht4c.Common.ContextFeature)">
            <summary>
Returns true if the actual provider supports the feature specified, otherwise false.
</summary>
            <param name="contextFeature">ContextFeature feature</param>
            <returns>true if the actual provider supports the feature specified, otherwise false.</returns>
            <seealso cref="T:ht4c.Common.ContextFeature" />
        </member>
        <member name="M:ht4c.Common.Context.getProperties(ht4c.Common.Properties*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Returns all configuration parameters.
</summary>
            <param name="properties">Receives the configuration parameters</param>
            <seealso cref="T:ht4c.Common.Properties" />
        </member>
        <member name="M:ht4c.Common.Context.createClient">
            <summary>
Creates a new Hypertable client.
</summary>
            <returns>New Client instance</returns>
            <remarks>To free the created instance, use the delete operator.</remarks>
        </member>
        <member name="M:ht4c.Common.Context.Dispose">
            <summary>
Destroys the Context instance.
</summary>
        </member>
        <member name="T:ht4c.Common.Context">
            <summary>
Abstract class represents a Hypertable context, handles connection to a Hypertable instance.
</summary>
        </member>
        <member name="M:ht4c.Common.Client.#ctor">
            <summary>
Creates a new Client instance.
</summary>
        </member>
        <member name="M:ht4c.Common.Client.existsNamespace(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,ht4c.Common.Namespace*)">
            <summary>
Checks if a namespace exists.
</summary>
            <param name="name">Namespace name</param>
            <param name="nsBase">Base namespace, might be NULL</param>
            <returns>true if the namespace exists</returns>
            <remarks>
Use '/' separator character to separate namespace names. Optionally specify nsBase
if the namespace to check is relative to an existing namespace.
</remarks>
        </member>
        <member name="M:ht4c.Common.Client.dropNamespace(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,ht4c.Common.Namespace*,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
Drops a namespace.
</summary>
            <param name="name">Namespace name</param>
            <param name="nsBase">Base namespace, might be NULL</param>
            <param name="ifExists">If true and the namespace does not exist the method won't fail</param>
            <param name="dropTables">If true the method drops all tables within the namespace(s)</param>
            <param name="deep">If true it drops all sub-namespaces</param>
            <remarks>
Use '/' separator character to separate namespace names. Optionally specify nsBase
if the namespace to drop is relative to an existing namespace.
</remarks>
        </member>
        <member name="M:ht4c.Common.Client.openNamespace(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,ht4c.Common.Namespace*)">
            <summary>
Opens an existig namespace.
</summary>
            <param name="name">Namespace name</param>
            <param name="nsBase">Base namespace, might be NULL</param>
            <returns>Opened namespace</returns>
            <remarks>
Use '/' separator character to separate namespace names. Optionally specify nsBase
if the namespace to open is relative to an existing namespace.
</remarks>
        </member>
        <member name="M:ht4c.Common.Client.createNamespace(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,ht4c.Common.Namespace*,System.Boolean,System.Boolean)">
            <summary>
Creates a new namespace.
</summary>
            <param name="name">Namespace name</param>
            <param name="nsBase">Base namespace, might be NULL</param>
            <param name="createIntermediate">If true, all intermediate namespaces will be created if not exist</param>
            <param name="createIfNotExists">If true, namespaces will be created if not exist</param>
            <remarks>
Use '/' separator character to separate namespace names. Optionally specify nsBase
to create the new namespace relative to an existing namespace.
</remarks>
        </member>
        <member name="M:ht4c.Common.Client.Dispose">
            <summary>
Destroys the Client instance.
</summary>
        </member>
        <member name="T:ht4c.Common.Client">
            <summary>
Abstract class represents Hypertable client.
</summary>
        </member>
        <member name="M:ht4c.Common.KeyBuilder.decode(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Byte*)">
            <summary>
Decodes a base85 encoded GUID.
</summary>
            <param name="cp">Base85 encoded GUID</param>
            <param name="cp">Receives the decoded GUID</param>
        </member>
        <member name="M:ht4c.Common.KeyBuilder.c_str">
            <summary>
Returns the base85 encoded GUID.
</summary>
            <returns>Base85 encoded GUID</returns>
        </member>
        <member name="M:ht4c.Common.KeyBuilder.op_Implicit~System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*">
            <summary>
Returns the base85 encoded GUID.
</summary>
            <returns>Base85 encoded GUID</returns>
        </member>
        <member name="M:ht4c.Common.KeyBuilder.Dispose">
            <summary>
Destroys the KeyBuilder instance.
</summary>
        </member>
        <member name="M:ht4c.Common.KeyBuilder.#ctor(System.Byte!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Initializes a new instance of the KeyBuilder class, using the specified GUID.
</summary>
            <param name="key">GUID to encode</param>
        </member>
        <member name="M:ht4c.Common.KeyBuilder.#ctor">
            <summary>
Initializes a new instance of the KeyBuilder class.
</summary>
            <remarks>Generates a new GUID</remarks>
        </member>
        <member name="T:ht4c.Common.KeyBuilder">
            <summary>
Represents a key builder, generates base85 encoded GUID's.
</summary>
        </member>
        <member name="M:Hypertable.Logging.TraceException(System.Exception)">
            <summary>
Writes a error event to the trace listeners in the trace source listener collection using the specified event type and message.
</summary>
            <param name="exception">The exception to trace.</param>
        </member>
        <member name="M:Hypertable.Logging.TraceEvent(System.Diagnostics.TraceEventType,System.Func{System.String})">
            <summary>
Writes a trace event to the trace listeners in the trace source listener collection using the specified event type and message.
</summary>
            <param name="traceEventType">The event type of the trace message.</param>
            <param name="func">Function returning the trace message, evaluated if the trace event type specified has been enabled.</param>
        </member>
        <member name="M:Hypertable.Logging.TraceEvent(System.Diagnostics.TraceEventType,System.String)">
            <summary>
Writes a trace event to the trace listeners in the trace source listener collection using the specified event type and message.
</summary>
            <param name="traceEventType">The event type of the trace message.</param>
            <param name="message">The trace message.</param>
        </member>
        <member name="M:Hypertable.Logging.IsEnabled(System.Diagnostics.TraceEventType)">
            <summary>
Determines whether the trace listener should trace the event of the type specified.
</summary>
            <param name="traceEventType">The event type.</param>
            <returns>true if the trace listener should trace the event of the type specified, otherwise false.</returns>
        </member>
        <member name="P:Hypertable.Logging.Logfile">
            <summary>
Gets or sets the logfile to be used.
</summary>
            <remarks>
Logs only the native hypertable client log events, the native hypertable logging level might be configured using the "Hypertable.Logging.Level" property.
</remarks>
        </member>
        <member name="P:Hypertable.Logging.LogMessagePublished">
            <summary>
Gets or sets the log message published delegate.
</summary>
            <remarks>
Gets called only for the native hypertable client log events, the native hypertable logging level might be configured using the "Hypertable.Logging.Level" property.
</remarks>
        </member>
        <member name="P:Hypertable.Logging.TraceSource">
            <summary>
Gets or sets the trace source to be used.
</summary>
            <remarks>
The default trace source name is "ht4n", the native hypertable logging level might be configured using the "Hypertable.Logging.Level" property.
</remarks>
        </member>
        <member name="T:Hypertable.Logging">
            <summary>
Represents a logging helper class.
</summary>
            <example>
Routing ht4n logs through NLog
<code>
&lt;system.diagnostics&gt;
  &lt;trace autoflush="true" /&gt;
  &lt;sources&gt;
    &lt;source name="ht4n" switchValue="All"&gt;
      &lt;listeners&gt;
        &lt;clear/&gt;
        &lt;add name="nlog" /&gt;
      &lt;/listeners&gt;
    &lt;/source&gt;
  &lt;/sources&gt;
  &lt;sharedListeners&gt;
    &lt;add name="nlog" type="NLog.NLogTraceListener, NLog" /&gt;
  &lt;/sharedListeners&gt;
&lt;/system.diagnostics&gt;
</code>
The following example shows how to use a logfile.
<code>
Logging.Logfile = Assembly.GetAssembly(typeof(Program)).Location + ".log";
</code>
The following example shows how to trace log entries.
<code>
Logging.LogMessagePublished = message =&gt; System.Diagnostics.Trace.WriteLine(message);
</code></example>
        </member>
        <member name="M:Hypertable.QueuedTableMutator.Finalize">
            <summary>
Clean up all unmanaged resources.
</summary>
        </member>
        <member name="M:Hypertable.QueuedTableMutator.Dispose">
            <summary>
Clean up all managed and unmanaged resources.
</summary>
        </member>
        <member name="T:Hypertable.QueuedTableMutator">
            <summary>
Represents a asynchronous table mutator.
</summary>
            <seealso cref="T:Hypertable.ITableMutator" />
        </member>
        <member name="T:Hypertable.AsyncResultSink">
            <summary>
Asynchronous opreation result sink.
</summary>
        </member>
        <member name="M:ht4c.Thrift.ThriftAsyncResult.Dispose">
            <summary>
Destroys the ThriftAsyncResult instance.
</summary>
        </member>
        <member name="M:ht4c.Thrift.ThriftAsyncResult.create(ht4c.Common.AsyncResultSink*,System.UInt32)">
            <summary>
Creates a new ThriftAsyncResult instance.
</summary>
            <param name="asyncResultSink">Callback for asynchronous table scan operations</param>
            <param name="capacity">Capacity in bytes of result queue. If zero then the queue capacity will be unbounded.</param>
            <returns>New ThriftAsyncResult instance</returns>
            <remarks>To free the created instance, use the delete operator.</remarks>
        </member>
        <member name="T:ht4c.Thrift.ThriftAsyncResult">
            <summary>
Represents results from asynchronous table scan operations, using the thrift API.
</summary>
            <remarks>Links between native and C++/CLI.</remarks>
            <seealso cref="T:ht4c.Common.AsyncResult" />
        </member>
        <member name="M:ht4c.Hyper.HyperAsyncResult.Dispose">
            <summary>
Destroys the HyperAsyncResult instance.
</summary>
        </member>
        <member name="M:ht4c.Hyper.HyperAsyncResult.create(ht4c.Common.AsyncResultSink*)">
            <summary>
Creates a new HyperAsyncResult instance.
</summary>
            <param name="asyncResultSink">Callback for asynchronous table scan operations</param>
            <returns>New HyperAsyncResult instance</returns>
            <remarks>To free the created instance, use the delete operator.</remarks>
        </member>
        <member name="T:ht4c.Hyper.HyperAsyncResult">
            <summary>
Represents results from asynchronous table scan operations, using the native hypertable API.
</summary>
            <remarks>Links between native and C++/CLI.</remarks>
            <seealso cref="T:ht4c.Common.AsyncResult" />
        </member>
        <member name="M:ht4c.Common.AsyncResultSink.failure(ht4c.Common.HypertableException*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Gets called if an asynchronous operation fails.
</summary>
            <param name="e">Exception</param>
        </member>
        <member name="M:ht4c.Common.AsyncResultSink.scannedCells(System.Int64,ht4c.Common.Cells*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Gets called if an asynchronous table scanner returns scanned cells.
</summary>
            <param name="asyncScannerId">Asynchronous table scanner identifier</param>
            <param name="cells">Cells returned by the scanner</param>
            <returns>The asynchronous table scanner callback result</returns>
        </member>
        <member name="M:ht4c.Common.AsyncResultSink.detachAsyncMutator(System.Int64)">
            <summary>
Detaches an asynchronous table mutator.
</summary>
            <param name="asyncMutatorId">Asynchronous table mutator identifier</param>
        </member>
        <member name="M:ht4c.Common.AsyncResultSink.detachAsyncScanner(System.Int64)">
            <summary>
Detaches an asynchronous table scanner.
</summary>
            <param name="asyncScannerId">Asynchronous table scanner identifier</param>
        </member>
        <member name="M:ht4c.Common.AsyncResultSink.Dispose">
            <summary>
Destroys the AsyncResultSink instance.
</summary>
        </member>
        <member name="T:ht4c.Common.AsyncResultSink">
            <summary>
Abstract class represents a callback for asynchronous table scan operations.
</summary>
        </member>
        <member name="M:ht4c.Common.AsyncResult.isCancelled">
            <summary>
Returns if the asynchronous operations have cancelled.
</summary>
            <returns>true if all asynchronous operations have cancelled</returns>
        </member>
        <member name="M:ht4c.Common.AsyncResult.isCompleted">
            <summary>
Returns if all asynchronous operations have completed.
</summary>
            <returns>true if all asynchronous operations have completed</returns>
        </member>
        <member name="M:ht4c.Common.AsyncResult.cancelAsyncMutator(System.Int64)">
            <summary>
Cancels asynchronous table mutator.
</summary>
        </member>
        <member name="M:ht4c.Common.AsyncResult.cancelAsyncScanner(System.Int64)">
            <summary>
Cancels asynchronous table scanner.
</summary>
        </member>
        <member name="M:ht4c.Common.AsyncResult.cancel">
            <summary>
Cancels any outstanding asynchronous operations.
</summary>
        </member>
        <member name="M:ht4c.Common.AsyncResult.join">
            <summary>
Blocks the calling thread until the asynchronous operations have completed.
</summary>
        </member>
        <member name="M:ht4c.Common.AsyncResult.attachAsyncMutator(System.Int64)">
            <summary>
Attaches an asynchronous table mutator.
</summary>
            <param name="asyncMutatorId">Asynchronous table mutator identifier</param>
        </member>
        <member name="M:ht4c.Common.AsyncResult.attachAsyncScanner(System.Int64)">
            <summary>
Attaches an asynchronous table scanner.
</summary>
            <param name="asyncScannerId">Asynchronous table scanner identifier</param>
        </member>
        <member name="M:ht4c.Common.AsyncResult.Dispose">
            <summary>
Destroys the AsyncResult instance.
</summary>
        </member>
        <member name="T:ht4c.Common.AsyncResult">
            <summary>
Abstract class represents results from asynchronous table scan operations.
</summary>
        </member>
        <member name="P:Hypertable.AsyncMutatorContext.MutatorSpec">
            <summary>
Gets the table mutator specification.
</summary>
            <seealso cref="P:Hypertable.AsyncMutatorContext.MutatorSpec" />
        </member>
        <member name="P:Hypertable.AsyncMutatorContext.Table">
            <summary>
Gets the table.
</summary>
            <seealso cref="T:Hypertable.ITable" />
        </member>
        <member name="P:Hypertable.AsyncMutatorContext.Id">
            <summary>
Gets the asynchronous table mutator identifier.
</summary>
            <seealso cref="T:Hypertable.ITable" />
        </member>
        <member name="T:Hypertable.AsyncMutatorContext">
            <summary>
Represents a asynchronous table mutator context.
</summary>
        </member>
        <member name="P:Hypertable.AsyncScannerContext.Param">
            <summary>
Gets the user defined parameter.
</summary>
        </member>
        <member name="P:Hypertable.AsyncScannerContext.ScanSpec">
            <summary>
Gets the table scanner specification.
</summary>
            <seealso cref="P:Hypertable.AsyncScannerContext.ScanSpec" />
        </member>
        <member name="P:Hypertable.AsyncScannerContext.Table">
            <summary>
Gets the table.
</summary>
            <seealso cref="T:Hypertable.ITable" />
        </member>
        <member name="P:Hypertable.AsyncScannerContext.Id">
            <summary>
Gets the asynchronous table scanner identifier.
</summary>
            <seealso cref="T:Hypertable.ITable" />
        </member>
        <member name="T:Hypertable.AsyncScannerContext">
            <summary>
Represents a asynchronous table scanner context.
</summary>
        </member>
        <member name="M:Hypertable.ITableMutator.Flush">
            <summary>
Flushes the accumulated mutations to their respective range servers.
</summary>
        </member>
        <member name="M:Hypertable.ITableMutator.Delete(System.Collections.Generic.IEnumerable{Hypertable.Cell})">
            <summary>
Deletes multiple cells.
</summary>
            <param name="cells">Collection of cells.</param>
            <remarks>
Cells will be deleted depending on the cell.Key properties populated:
<table class="comment"><tr><th>Key.Row</th><th>Key.ColumnFamily</th><th>Key.ColumnQualifier</th><th>Cells to delete</th></tr><tr><td>Available</td><td>null or empty</td><td>null</td><td>All cells in the entire row</td></tr><tr><td>Available</td><td>Available</td><td>null</td><td>All cells in row,column family</td></tr><tr><td>Available</td><td>Available</td><td>Available</td><td>All cells in row,column family:column qualifier</td></tr></table>
If cell.Key.DateTime has been specified then only cells older or equal as Key.DateTime will be deleted.
</remarks>
        </member>
        <member name="M:Hypertable.ITableMutator.Delete(System.Collections.Generic.IEnumerable{Hypertable.Key})">
            <summary>
Deletes multiple cells.
</summary>
            <param name="keys">Collection of key.</param>
            <remarks>
Cells will be deleted depending on the key properties populated:
<table class="comment"><tr><th>Key.Row</th><th>Key.ColumnFamily</th><th>Key.ColumnQualifier</th><th>Cells to delete</th></tr><tr><td>Available</td><td>null or empty</td><td>null</td><td>All cells in the entire row</td></tr><tr><td>Available</td><td>Available</td><td>null</td><td>All cells in row,column family</td></tr><tr><td>Available</td><td>Available</td><td>Available</td><td>All cells in row,column family:column qualifier</td></tr></table>
If Key.DateTime has been specified then only cells older or equal as Key.DateTime will be deleted.
</remarks>
        </member>
        <member name="M:Hypertable.ITableMutator.Delete(Hypertable.Key)">
            <summary>
Deletes an entire row, a column family in a particular row, or a specific cell within a row.
</summary>
            <param name="key">Key.</param>
            <remarks>
Cells will be deleted depending on the key properties populated:
<table class="comment"><tr><th>Key.Row</th><th>Key.ColumnFamily</th><th>Key.ColumnQualifier</th><th>Cells to delete</th></tr><tr><td>Available</td><td>null or empty</td><td>null</td><td>All cells in the entire row</td></tr><tr><td>Available</td><td>Available</td><td>null</td><td>All cells in row,column family</td></tr><tr><td>Available</td><td>Available</td><td>Available</td><td>All cells in row,column family:column qualifier</td></tr></table>
If Key.DateTime has been specified then only cells older or equal as Key.DateTime will be deleted.
</remarks>
        </member>
        <member name="M:Hypertable.ITableMutator.Delete(System.String)">
            <summary>
Deletes an entire row.
</summary>
            <param name="row">Row key</param>
        </member>
        <member name="M:Hypertable.ITableMutator.Set(System.Collections.Generic.IEnumerable{Hypertable.Cell},System.Boolean)">
            <summary>
Inserts multiple cells into a table, optionally create row keys.
</summary>
            <param name="cells">Cell collection to insert.</param>
            <param name="createRowKey">if true a base85 encoded GUID row keys will be created.</param>
            <seealso cref="T:Hypertable.Cell" />
            <remarks>
The row key (cell.Key.Row) will be updated for all cells if createRowKey is true.
</remarks>
        </member>
        <member name="M:Hypertable.ITableMutator.Set(System.Collections.Generic.IEnumerable{Hypertable.Cell})">
            <summary>
Inserts multiple cells into a table a table or delete cells.
</summary>
            <param name="cells">Cell collection to insert.</param>
            <remarks>
In order to delete cells set the cell flag (cell.Flag) approriate.
</remarks>
            <seealso cref="T:Hypertable.Cell" />
            <seealso cref="T:Hypertable.CellFlag" />
        </member>
        <member name="M:Hypertable.ITableMutator.Set(Hypertable.Cell,System.Boolean)">
            <summary>
Inserts a new cell into a table, optionally create row key.
</summary>
            <param name="cell">Cell to insert.</param>
            <param name="createRowKey">if true a base85 encoded GUID row key will be created.</param>
            <seealso cref="T:Hypertable.Cell" />
            <remarks>
The row key (cell.Key.Row) will be updated if createRowKey is true.
</remarks>
        </member>
        <member name="M:Hypertable.ITableMutator.Set(Hypertable.Cell)">
            <summary>
Inserts a new cell into a table or delete cells.
</summary>
            <param name="cell">Cell to insert.</param>
            <remarks>
In order to delete cells set the cell flag (cell.Flag) approriate.
</remarks>
            <seealso cref="T:Hypertable.Cell" />
            <seealso cref="T:Hypertable.CellFlag" />
        </member>
        <member name="M:Hypertable.ITableMutator.Set(Hypertable.Key,System.Byte[],System.Boolean)">
            <summary>
Inserts a new cell into a table, optionally create row key.
</summary>
            <param name="key">Cell key.</param>
            <param name="value">Cell value, might be null.</param>
            <param name="createRowKey">if true a base85 encoded GUID row key will be created.</param>
            <seealso cref="T:Hypertable.Key" />
            <remarks>
The row key (key.Row) will be updated if createRowKey is true.
</remarks>
        </member>
        <member name="M:Hypertable.ITableMutator.Set(Hypertable.Key,System.Byte[])">
            <summary>
Inserts a new cell into a table.
</summary>
            <param name="key">Cell key.</param>
            <param name="value">Cell value, might be null.</param>
            <seealso cref="T:Hypertable.Key" />
        </member>
        <member name="P:Hypertable.ITableMutator.IsDisposed">
            <summary>
Gets a value indicating whether the object has been disposed.
</summary>
            <remarks>true if the object has been disposed, otherwise false.</remarks>
        </member>
        <member name="T:Hypertable.ITableMutator">
            <summary>
Defines a generalized table mutator.
</summary>
            <example>
The following example shows how to insert a cell.
<code>
byte[] value = ...;
using( var mutator = table.CreateMutator() ) {
   Key key = new Key(Guid.NewGuid().ToString(), "cf");
   mutator.Set( key, value );
}
</code>
The following example shows how to insert a cell and create a unique row key.
<code>
byte[] value = ...;
using( var mutator = table.CreateMutator() ) {
   Key key = new Key() { ColumnFamily = "cf" }; // w'out row key
   mutator.Set( key, value, true ); // create row key and assign to key
}
</code>
The following example shows how to delete an entire row.
<code>
string row = ...;
using( var mutator = table.CreateMutator() ) {
   mutator.Delete( row );
}
</code>
The following example shows how to delete all cells in row, column family:column qualifier.
<code>
string row = ...;
using( var mutator = table.CreateMutator() ) {
   mutator.Delete( new Key(row, "cf", "cq") );
}
// or
var key = new Key( row, "cf", "cq" );
using( var mutator = table.CreateMutator() ) {
   mutator.Set( new Cell(key, CellFlag::DeleteCell) );
}
</code></example>
            <seealso cref="T:Hypertable.Key" />
            <seealso cref="T:Hypertable.Cell" />
        </member>
        <member name="M:Hypertable.AsyncResult.CancelAsyncMutator(Hypertable.AsyncMutatorContext)">
            <summary>
Cancels an asynchronous mutator.
</summary>
            <param name="asyncMutatorContext">Asynchronous mutator context.</param>
        </member>
        <member name="M:Hypertable.AsyncResult.CancelAsyncScanner(Hypertable.AsyncScannerContext)">
            <summary>
Cancels an asynchronous scanner.
</summary>
            <param name="asyncScannerContext">Asynchronous scanner context.</param>
        </member>
        <member name="M:Hypertable.AsyncResult.Cancel">
            <summary>
Cancels any outstanding asynchronous operations.
</summary>
        </member>
        <member name="M:Hypertable.AsyncResult.Join">
            <summary>
Blocks the calling thread until the asynchronous operation has completed.
</summary>
        </member>
        <member name="M:Hypertable.AsyncResult.Finalize">
            <summary>
Clean up all unmanaged resources.
</summary>
        </member>
        <member name="M:Hypertable.AsyncResult.Dispose">
            <summary>
Clean up all managed and unmanaged resources.
</summary>
        </member>
        <member name="M:Hypertable.AsyncResult.#ctor(Hypertable.AsyncScannerCallback)">
            <summary>
Initializes a new instance of the AsyncResult class using the specified AsyncScannerCallback.
</summary>
            <param name="callback">The AsyncScannerCallback delegate to call when the asynchronous table scan operation returns cells.</param>
            <seealso cref="T:Hypertable.AsyncScannerCallback" />
        </member>
        <member name="M:Hypertable.AsyncResult.#ctor">
            <summary>
Initializes a new instance of the AsyncResult class.
</summary>
        </member>
        <member name="P:Hypertable.AsyncResult.IsDisposed">
            <summary>
Gets a value indicating whether the object has been disposed.
</summary>
            <remarks>true if the object has been disposed, otherwise false.</remarks>
        </member>
        <member name="P:Hypertable.AsyncResult.Error">
            <summary>
Gets a value indicating which error occurred during an asynchronous operation.
</summary>
        </member>
        <member name="P:Hypertable.AsyncResult.ScannerCallback">
            <summary>
Gets the scanner callback.
</summary>
        </member>
        <member name="P:Hypertable.AsyncResult.IsCancelled">
            <summary>
Gets a value that indicates whether the asynchronous operation has cancelled.
</summary>
        </member>
        <member name="P:Hypertable.AsyncResult.IsCompleted">
            <summary>
Gets a value that indicates whether the asynchronous operation has completed.
</summary>
            <remarks>Returns false if the asynchronous operation has cancelled.</remarks>
        </member>
        <member name="P:Hypertable.AsyncResult.CompletedSynchronously">
            <summary>
Gets a value that indicates whether the asynchronous operation completed synchronously.
</summary>
            <remarks>Returns always false.</remarks>
            <seealso cref="P:Hypertable.AsyncResult.IsCompleted" />
        </member>
        <member name="P:Hypertable.AsyncResult.AsyncWaitHandle">
            <summary>
Gets a WaitHandle that is used to wait for an asynchronous operation to complete.
</summary>
            <remarks>Property has not been implemented so far, throws NotImplException.</remarks>
            <seealso cref="M:Hypertable.AsyncResult.Join" />
        </member>
        <member name="P:Hypertable.AsyncResult.AsyncState">
            <summary>
Gets a user-defined object that qualifies or contains information about an asynchronous operation.
</summary>
            <remarks>Property has not been implemented so far, throws NotImplException.</remarks>
        </member>
        <member name="T:Hypertable.AsyncResult">
            <summary>
Represents results from asynchronous table scan operations.
</summary>
            <example>
The following example shows how to scan a multiple tables asynchronously.
<code>
using( var asynResult = new AsyncResult(
   delegate( AsyncScannerContext asyncScannerContext, IList&lt;Cell&gt; cells ) {
      // process cells
      return true; // continue, return false to cancel
   }) ) {
   tableA.BeginScan(new ScanSpec().AddColumn("a"), asynResult);
   tableB.BeginScan(new ScanSpec().AddColumn("b"), asynResult);
   asynResult.Join();
 }
</code></example>
        </member>
        <member name="T:ht4c.Common.ContextKind">
            <summary>
Specifies possible context values. The context kind defines the
provider API to use for any operation within the context.
</summary>
        </member>
        <member name="F:CK_SQLite">
            <summary>
Terminator.
</summary>
        </member>
        <member name="F:CK_Hamster">
            <summary>
Hypertable SQLite API context kind.
</summary>
        </member>
        <member name="F:CK_Thrift">
            <summary>
Hypertable hamster API context kind.
</summary>
        </member>
        <member name="F:CK_Hyper">
            <summary>
Hypertable thrift API context kind.
</summary>
        </member>
        <member name="F:CK_Unknown">
            <summary>
Unknown context kind.
</summary>
            <summary>
Hypertable native protocol context kind.
</summary>
        </member>
        <member name="M:Hypertable.Key.Decode(System.String)">
            <summary>
Decodes a base85 encoded GUID.
</summary>
            <param name="value">base85 GUID to decode.</param>
            <returns>Decoded GUID.</returns>
        </member>
        <member name="M:Hypertable.Key.Encode(System.Guid)">
            <summary>
Encodes a specified GUID to base85.
</summary>
            <param name="value">GUID to base85 encode.</param>
            <returns>base85 encoded GUID.</returns>
        </member>
        <member name="M:Hypertable.Key.Generate">
            <summary>
Generates a base85 encoded GUID.
</summary>
            <returns>A new base85 encoded GUID.</returns>
        </member>
        <member name="M:Hypertable.Key.op_GreaterThan(Hypertable.Key,Hypertable.Key)">
            <summary>
Determines whether one specified key is greater than the other.
</summary>
            <param name="x">The first key to compare, or null.</param>
            <param name="y">The second key to compare, or null.</param>
            <returns>true if the value of x is greater than the value of y, otherwise false.</returns>
        </member>
        <member name="M:Hypertable.Key.op_LessThan(Hypertable.Key,Hypertable.Key)">
            <summary>
Determines whether one specified key is less than the other.
</summary>
            <param name="x">The first key to compare, or null.</param>
            <param name="y">The second key to compare, or null.</param>
            <returns>true if the value of x is less than the value of y, otherwise false.</returns>
        </member>
        <member name="M:Hypertable.Key.op_Inequality(Hypertable.Key,Hypertable.Key)">
            <summary>
Determines whether two specified keys are different.
</summary>
            <param name="x">The first key to compare, or null.</param>
            <param name="y">The second key to compare, or null.</param>
            <returns>true if the value of x is different as the value of y, otherwise false.</returns>
        </member>
        <member name="M:Hypertable.Key.op_Equality(Hypertable.Key,Hypertable.Key)">
            <summary>
Determines whether two specified keys are equal.
</summary>
            <param name="x">The first key to compare, or null.</param>
            <param name="y">The second key to compare, or null.</param>
            <returns>true if the value of x is the same as the value of y, otherwise false.</returns>
        </member>
        <member name="M:Hypertable.Key.Compare(Hypertable.Key,Hypertable.Key)">
            <summary>
Compares two specified keys and returns an integer that indicates their relative position in the sort order.
</summary>
            <param name="x">The first key to compare, or null.</param>
            <param name="y">The second key to compare, or null.</param>
            <returns>
Signed integer that indicates the relationship between the two comparands:
<table class="comment"><tr><td>&lt; 0</td><td>if x is less than y</td></tr><tr><td>= 0</td><td>if x equals y</td></tr><tr><td>&gt; 0</td><td>if x is greater than y</td></tr></table></returns>
        </member>
        <member name="M:Hypertable.Key.Clone">
            <summary>
Creates a new object that is a copy of this instance.
</summary>
            <returns>A new Key instance equal to this instance.</returns>
        </member>
        <member name="M:Hypertable.Key.ToString">
            <summary>
Returns a string that represents the current object.
</summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:Hypertable.Key.GetHashCode">
            <summary>
Returns the hash code for this Key.
</summary>
            <returns>Signed hash code.</returns>
        </member>
        <member name="M:Hypertable.Key.Equals(System.Object)">
            <summary>
Determines whether this instance and a specified object, which must also be a Key object, equals.
</summary>
            <param name="obj">Key to compare, or null.</param>
            <returns>true if the value of obj is the same as the value of this instance, otherwise false.</returns>
        </member>
        <member name="M:Hypertable.Key.Equals(Hypertable.Key)">
            <summary>
Determines whether this instance and an other Key object equals.
</summary>
            <param name="other">Key to compare, or null.</param>
            <returns>true if the value of obj is the same as the value of this instance, otherwise false.</returns>
        </member>
        <member name="M:Hypertable.Key.CompareTo(Hypertable.Key)">
            <summary>
Compares this instance with a specified Key object and indicates whether this instance precedes, follows,
or appears in the same position in the sort order as the specified Key.
</summary>
            <param name="other">Key to compare, or null.</param>
            <returns>
Signed integer that indicates the relationship between the comparand and this instance:
<table class="comment"><tr><td>&lt; 0</td><td>if this instance precedes other.</td></tr><tr><td>= 0</td><td>if this instance equals other.</td></tr><tr><td>&gt; 0</td><td>if this instance follows other.</td></tr></table></returns>
        </member>
        <member name="P:Hypertable.Key.DateTime">
            <summary>
Gets or sets the timestamp.
</summary>
        </member>
        <member name="P:Hypertable.Key.Timestamp">
            <summary>
Gets or sets the timestamp in nanoseconds since 1970-01-01 00:00:00.0 UTC.
</summary>
            <remarks>
If 0 the database assigns the timestamp automatically on a insert/update cell operation.
</remarks>
        </member>
        <member name="P:Hypertable.Key.ColumnQualifier">
            <summary>
Gets or sets the column qualifier.
</summary>
        </member>
        <member name="P:Hypertable.Key.ColumnFamily">
            <summary>
Gets or sets the column family.
</summary>
        </member>
        <member name="P:Hypertable.Key.Row">
            <summary>
Gets or sets the row key.
</summary>
        </member>
        <member name="M:Hypertable.Key.#ctor(Hypertable.Key)">
            <summary>
Initializes a new instance of the Key class that is a copy of the specified instance.
</summary>
            <param name="key">Key to copy.</param>
        </member>
        <member name="M:Hypertable.Key.#ctor(System.String,System.String,System.String,System.DateTime)">
            <summary>
Initializes a new instance of the Key class using row key, column family, column qualifier and timestamp.
</summary>
            <param name="row">Row key.</param>
            <param name="columnFamily">Column family.</param>
            <param name="columnQualifier">column qualifier.</param>
            <param name="dateTime">Timestamp.</param>
        </member>
        <member name="M:Hypertable.Key.#ctor(System.String,System.String,System.String)">
            <summary>
Initializes a new instance of the Key class using row key, column family and column qualifier.
</summary>
            <param name="row">Row key.</param>
            <param name="columnFamily">Column family.</param>
            <param name="columnQualifier">column qualifier.</param>
        </member>
        <member name="M:Hypertable.Key.#ctor(System.String,System.String)">
            <summary>
Initializes a new instance of the Key class using row key and column family.
</summary>
            <param name="row">Row key.</param>
            <param name="columnFamily">Column family.</param>
        </member>
        <member name="M:Hypertable.Key.#ctor(System.String)">
            <summary>
Initializes a new instance of the Key class using row key.
</summary>
            <param name="row">Row key.</param>
        </member>
        <member name="M:Hypertable.Key.#ctor">
            <summary>
Initializes a new instance of the Key class.
</summary>
        </member>
        <member name="T:Hypertable.Key">
            <summary>
Represents a Hypertable key, provide accessors to the key attributes.
</summary>
            <remarks>
The Hypertable data model consists of a multi-dimensional table of information that can be queried using a single primary key.
The first dimension of the table is the row key. The row key is the primary key and defines the order in which the table data
is physically stored. The second dimension is the column family. This dimension is somewhat analogous to a traditional database
column. The third dimension is the column qualifier. Within each column family, there can be a theoretically infinite number of
qualified instances. The fourth and final dimension is the time dimension. The key is essentially the concatenation of the four
dimension keys (row, column family, column qualifier and timestamp).
See also <a href="http://code.google.com/p/hypertable/wiki/ArchitecturalOverview" target="_blank">architectural overview</a>.
</remarks>
        </member>
        <member name="M:Hypertable.KeyComparer.GetHashCode(System.Object)">
            <summary>
Returns a hash code for the specified object.
</summary>
            <param name="obj">Key to get a hash code.</param>
            <returns>A hash code for the specified object.</returns>
        </member>
        <member name="M:Hypertable.KeyComparer.Equals(System.Object,System.Object)">
            <summary>
Determines whether the specified objects are equal.
</summary>
            <param name="x">The first key to compare, or null.</param>
            <param name="y">The second key to compare, or null.</param>
            <returns>true if the value of obj is the same as the value of this instance, otherwise false.</returns>
        </member>
        <member name="M:Hypertable.KeyComparer.GetHashCode(Hypertable.Key)">
            <summary>
Returns a hash code for the specified object.
</summary>
            <param name="obj">Key to get a hash code.</param>
            <returns>A hash code for the specified object.</returns>
        </member>
        <member name="M:Hypertable.KeyComparer.Equals(Hypertable.Key,Hypertable.Key)">
            <summary>
Determines whether the specified objects are equal.
</summary>
            <param name="x">The first key to compare, or null.</param>
            <param name="y">The second key to compare, or null.</param>
            <returns>true if the value of obj is the same as the value of this instance, otherwise false.</returns>
        </member>
        <member name="M:Hypertable.KeyComparer.#ctor(System.Boolean)">
            <summary>
Initializes a new instance of the KeyComparer class using a value that indicates whether to include the timestamp in the comparison or not.
</summary>
            <param name="includeTimestamp">A value that indicates whether to include the timestamp in the comparison or not.</param>
        </member>
        <member name="M:Hypertable.KeyComparer.#ctor">
            <summary>
Initializes a new instance of the KeyComparer class.
</summary>
        </member>
        <member name="T:Hypertable.KeyComparer">
            <summary>
Represents a cell key comparer.
</summary>
            <remarks>
An undefined column qualifier will be treated the same as an empty column qualifier.
</remarks>
        </member>
        <member name="M:ht4c.Common.TableScanner.#ctor">
            <summary>
Creates a new TableScanner instance.
</summary>
        </member>
        <member name="M:ht4c.Common.TableScanner.next(ht4c.Common.Cell**!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Returns the next cell.
</summary>
            <param name="cell">Receives the cell</param>
            <returns>true if succeeded, false if the scan has been completed</returns>
        </member>
        <member name="M:ht4c.Common.TableScanner.Dispose">
            <summary>
Destroys the TableScanner instance.
</summary>
        </member>
        <member name="T:ht4c.Common.TableScanner">
            <summary>
Abstract class represents a synchronous table scanner.
</summary>
        </member>
        <member name="M:Hypertable.ScanSpec.ToString">
            <summary>
Returns a string that represents the current object.
</summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:Hypertable.ScanSpec.RemoveCellInterval(Hypertable.CellInterval)">
            <summary>
Removes a cell interval.
</summary>
            <param name="cellInterval">Cell interval to remove.</param>
            <returns>This ScanSpec instance.</returns>
        </member>
        <member name="M:Hypertable.ScanSpec.AddCellInterval(Hypertable.CellInterval)">
            <summary>
Adds a cell interval to be returned in the scan.
</summary>
            <param name="cellInterval">Cell interval to add.</param>
            <returns>This ScanSpec instance.</returns>
        </member>
        <member name="M:Hypertable.ScanSpec.RemoveRowInterval(Hypertable.RowInterval)">
            <summary>
Removes a row interval.
</summary>
            <param name="rowInterval">Row interval to remove.</param>
            <returns>This ScanSpec instance.</returns>
        </member>
        <member name="M:Hypertable.ScanSpec.AddRowInterval(Hypertable.RowInterval)">
            <summary>
Adds a row interval to be returned in the scan.
</summary>
            <param name="rowInterval">Row interval to add.</param>
            <returns>This ScanSpec instance.</returns>
        </member>
        <member name="M:Hypertable.ScanSpec.RemoveCell(Hypertable.Key)">
            <summary>
Removes a cell.
</summary>
            <param name="key">Cell key.</param>
            <returns>This ScanSpec instance.</returns>
        </member>
        <member name="M:Hypertable.ScanSpec.RemoveCell(System.String,System.String,System.String)">
            <summary>
Removes a cell.
</summary>
            <param name="row">Row.</param>
            <param name="columnFamily">Column family.</param>
            <param name="columnQualifier">Column qualifier.</param>
            <returns>This ScanSpec instance.</returns>
        </member>
        <member name="M:Hypertable.ScanSpec.AddCell(Hypertable.Key)">
            <summary>
Adds a cell to be returned in the scan.
</summary>
            <param name="key">Cell key.</param>
            <returns>This ScanSpec instance.</returns>
        </member>
        <member name="M:Hypertable.ScanSpec.AddCell(System.String,System.String,System.String)">
            <summary>
Adds a cell to be returned in the scan.
</summary>
            <param name="row">Row.</param>
            <param name="columnFamily">Column family.</param>
            <param name="columnQualifier">Column qualifier.</param>
            <returns>This ScanSpec instance.</returns>
        </member>
        <member name="M:Hypertable.ScanSpec.RemoveColumnPredicate(Hypertable.ColumnPredicate)">
            <summary>
Removes a column predicate.
</summary>
            <param name="columnPredicate">Column predicate to remove.</param>
            <returns>This ScanSpec instance.</returns>
        </member>
        <member name="M:Hypertable.ScanSpec.AddColumnPredicate(Hypertable.ColumnPredicate)">
            <summary>
Adds a column predicate to the scan.
</summary>
            <param name="columnPredicate">Column predicate to add.</param>
            <returns>This ScanSpec instance.</returns>
        </member>
        <member name="M:Hypertable.ScanSpec.RemoveColumn(System.String)">
            <summary>
Removes a column family.
</summary>
            <param name="column">Column family to remove.</param>
            <returns>This ScanSpec instance.</returns>
            <remarks>
column family[:[[^]column qualifier|column qualifier regexp]] defines a column.
</remarks>
        </member>
        <member name="M:Hypertable.ScanSpec.AddColumn(System.String)">
            <summary>
Adds a column to be returned in the scan.
</summary>
            <param name="column">Column family to add.</param>
            <returns>This ScanSpec instance.</returns>
            <remarks>
column family[:[[^]column qualifier|column qualifier regexp]] defines a column.
</remarks>
        </member>
        <member name="M:Hypertable.ScanSpec.ContainsRow(System.String)">
            <summary>
Checks if the scan specification contains a row.
</summary>
            <param name="row">Row to check.</param>
            <returns>true if the scan specification contains the row.</returns>
        </member>
        <member name="M:Hypertable.ScanSpec.RemoveRow(System.String)">
            <summary>
Removes a row.
</summary>
            <param name="row">Row to remove.</param>
            <returns>This ScanSpec instance.</returns>
        </member>
        <member name="M:Hypertable.ScanSpec.AddRows(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
Adds a bunch of rows to be returned in the scan.
</summary>
            <param name="rows">Rows to add.</param>
            <returns>This ScanSpec instance.</returns>
        </member>
        <member name="M:Hypertable.ScanSpec.AddRow(System.String)">
            <summary>
Adds a row to be returned in the scan.
</summary>
            <param name="row">Row to add.</param>
            <returns>This ScanSpec instance.</returns>
        </member>
        <member name="P:Hypertable.ScanSpec.CellIntervals">
            <summary>
Gets the cell intervals.
</summary>
        </member>
        <member name="P:Hypertable.ScanSpec.RowIntervals">
            <summary>
Gets the row intervals.
</summary>
        </member>
        <member name="P:Hypertable.ScanSpec.Cells">
            <summary>
Gets the cells.
</summary>
        </member>
        <member name="P:Hypertable.ScanSpec.ColumnPredicates">
            <summary>
Gets the column predicates.
</summary>
        </member>
        <member name="P:Hypertable.ScanSpec.Columns">
            <summary>
Gets the columns.
</summary>
        </member>
        <member name="P:Hypertable.ScanSpec.Rows">
            <summary>
Gets the rows.
</summary>
        </member>
        <member name="P:Hypertable.ScanSpec.CellIntervalCount">
            <summary>
Gets the number of cell intervals.
</summary>
        </member>
        <member name="P:Hypertable.ScanSpec.RowIntervalCount">
            <summary>
Gets the number of row intervals.
</summary>
        </member>
        <member name="P:Hypertable.ScanSpec.CellCount">
            <summary>
Gets the number of cells.
</summary>
        </member>
        <member name="P:Hypertable.ScanSpec.ColumnPredicateCount">
            <summary>
Gets the number of column predicates.
</summary>
        </member>
        <member name="P:Hypertable.ScanSpec.ColumnCount">
            <summary>
Gets the number of columns.
</summary>
        </member>
        <member name="P:Hypertable.ScanSpec.RowCount">
            <summary>
Gets the number of rows.
</summary>
        </member>
        <member name="P:Hypertable.ScanSpec.Flags">
            <summary>
Gets or sets the table scanner flags.
</summary>
        </member>
        <member name="P:Hypertable.ScanSpec.Timeout">
            <summary>
Gets or sets the maximum time to allow scanner methods to execute before time out, if zero timeout is disabled.
</summary>
        </member>
        <member name="P:Hypertable.ScanSpec.ValueRegex">
            <summary>
Gets or sets a regular expression to filter cell values by.
</summary>
        </member>
        <member name="P:Hypertable.ScanSpec.RowRegex">
            <summary>
Gets or sets a regular expression to filter rows by.
</summary>
        </member>
        <member name="P:Hypertable.ScanSpec.EndDateTime">
            <summary>
Gets or sets the end time of the scan.
</summary>
            <remarks>If set only cells with timestamp older or equal will be returned.</remarks>
        </member>
        <member name="P:Hypertable.ScanSpec.StartDateTime">
            <summary>
Gets or sets the start time of the scan.
</summary>
            <remarks>If set only cells with timestamp newer or equal will be returned.</remarks>
        </member>
        <member name="P:Hypertable.ScanSpec.ScanAndFilter">
            <summary>
Gets or sets a value that indicates whether to use scan and filter rows or not.
</summary>
            <remarks>
The scan and filter rows option can be used to improve query performance for queries that
select a very large number of individual rows. The default algorithm for fetching a set of
rows is to fetch each row individually, which involves a network roundtrip to a range server
for each row. Supplying the scan and filter rows option tells the system to scan over the data
and filter the requested rows at the range server, which will reduce the number of network
roundtrips required when the number of rows requested is very large.<br /><br />
Scan and filter should be used if query more than 10% of all rows in a table.
</remarks>
        </member>
        <member name="P:Hypertable.ScanSpec.KeysOnly">
            <summary>
Gets or sets a value that indicates whether to return keys only or not.
</summary>
        </member>
        <member name="P:Hypertable.ScanSpec.CellOffset">
            <summary>
Gets or sets the number of cells to be skipped at the beginning of the query.
</summary>
            <remarks>
Not valid in combination of row offset. Applies to each row/cell interval individual.
</remarks>
        </member>
        <member name="P:Hypertable.ScanSpec.RowOffset">
            <summary>
Sets or gets the number of rows to be skipped at the beginning of the query.
</summary>
            <remarks>
Not valid in combination of cell offset. Applies to each row/cell interval individual.
</remarks>
        </member>
        <member name="P:Hypertable.ScanSpec.MaxCellsColumnFamily">
            <summary>
Gets or sets the maximum number of cells to return per column family and row.
</summary>
            <remarks>Set to zero (default) for unlimited numbers of cells.</remarks>
        </member>
        <member name="P:Hypertable.ScanSpec.MaxCells">
            <summary>
Gets or sets the maximum number of cells to return.
</summary>
            <remarks>
Set to zero (default) for unlimited numbers of cells.
Applies to each row/cell interval individual.
</remarks>
        </member>
        <member name="P:Hypertable.ScanSpec.MaxVersions">
            <summary>
Gets or sets the maximum number of revisions of each cell to return in the scan.
</summary>
            <remarks>Set to zero (default) for unlimited numbers of revisions.</remarks>
        </member>
        <member name="P:Hypertable.ScanSpec.MaxRows">
            <summary>
Gets or sets the maximum number of rows to return in the scan.
</summary>
            <remarks>
Set to zero (default) for unlimited numbers of rows.
Applies to each row/cell interval individual.
</remarks>
        </member>
        <member name="M:Hypertable.ScanSpec.#ctor(Hypertable.CellInterval)">
            <summary>
Initializes a new instance of the ScanSpec class using the cell interval specified.
</summary>
            <param name="cellInterval">Cell interval to add to the scan specification.</param>
        </member>
        <member name="M:Hypertable.ScanSpec.#ctor(Hypertable.RowInterval)">
            <summary>
Initializes a new instance of the ScanSpec class using the row interval specified.
</summary>
            <param name="rowInterval">Row interval to add to the scan specification.</param>
        </member>
        <member name="M:Hypertable.ScanSpec.#ctor(Hypertable.ColumnPredicate)">
            <summary>
Initializes a new instance of the ScanSpec class using the column predicate specified.
</summary>
            <param name="columnPredicate">Column predicate to add to the scan specification.</param>
        </member>
        <member name="M:Hypertable.ScanSpec.#ctor(Hypertable.Key)">
            <summary>
Initializes a new instance of the ScanSpec class using the key specified.
</summary>
            <param name="key">Cell to add to the scan specification.</param>
        </member>
        <member name="M:Hypertable.ScanSpec.#ctor(System.String)">
            <summary>
Initializes a new instance of the ScanSpec class using the row specified.
</summary>
            <param name="row">Row to add to the scan specification.</param>
        </member>
        <member name="M:Hypertable.ScanSpec.#ctor(System.Boolean)">
            <summary>
Initializes a new instance of the ScanSpec class using sorted containers, removes duplicates.
</summary>
            <param name="sorted">A value that indicates whether to use sorted collections or not.</param>
        </member>
        <member name="M:Hypertable.ScanSpec.#ctor">
            <summary>
Initializes a new instance of the ScanSpec class.
</summary>
        </member>
        <member name="T:Hypertable.ScanSpec">
            <summary>
Represents a table scanner specification.
</summary>
            <example>
The following example shows how to add columns to the scan specification.
<code>
ScanSpec scanSpec = new ScanSpec()
                       .AddColumn("cf1")             // all cells in column family cf1
                       .AddColumn("cf2:cq")          // all cells in column family cf2 with column qualifier cq
                       .AddColumn("cf3:/abc[0-9]/")  // all cells in cf3 where column qualifier matches the regex
                       .AddColumn("cf4:");           // all cells in cf4 where no column qualifier exists
                       .AddColumn("cf5:^xyz");       // all cells in cf5 where the column qualifier starts with the prefix specified

using( var scanner = table.CreateScanner(scanSpec) ) {
   foreach( cell cell in scanner ) {
      // process cell
   }
}
</code>
The following example shows how to use scan and filter rows.
<code>
IEnumerable&lt;string&gt; manyRows = ...; // 10% or more rows in table
var scanSpec = new ScanSpec() { ScanAndFilter = true }.AddRows(manyRows);

using( var scanner = table.CreateScanner(scanSpec) ) {
   foreach( cell cell in scanner ) {
      // process cell
   }
}
</code>
The following example shows how to add a row interval.
<code>
var scanSpec = new ScanSpec(new RowInterval("a", "z"));

using( var scanner = table.CreateScanner(scanSpec) ) {
   foreach( cell cell in scanner ) {
      // process cell
   }
}
</code>
The following example shows how to filter rows by a regular expression.
<code>
var scanSpec = new ScanSpec() { RowRegex = "a.*" }.AddColumn("cf");

using( ITablScanner scanner = table.CreateScanner(scanSpec) ) {
   foreach( cell cell in scanner ) {
      // process cell
   }
}
</code></example>
            <seealso cref="T:Hypertable.ITable" />
        </member>
        <member name="T:Hypertable.ScannerFlags">
            <summary>
Specifies possible table scanner flag values.
</summary>
            <seealso cref="T:Hypertable.ScanSpec" />
        </member>
        <member name="F:Hypertable.ScannerFlags.NoAutoTableRefresh">
            <summary>
Do not refresh table cache automatically.
</summary>
        </member>
        <member name="F:Hypertable.ScannerFlags.RefreshTableCache">
            <summary>
Refresh table cache.
</summary>
        </member>
        <member name="F:Hypertable.ScannerFlags.BypassTableCache">
            <summary>
Bypass table cache.
</summary>
        </member>
        <member name="F:Hypertable.ScannerFlags.Default">
            <summary>
Default behaviour.
</summary>
        </member>
        <member name="T:ht4c.Common.ScannerFlags">
            <summary>
Specifies possible table scanner flag values.
</summary>
        </member>
        <member name="M:Hypertable.TableScanner.Finalize">
            <summary>
Clean up all unmanaged resources.
</summary>
        </member>
        <member name="M:Hypertable.TableScanner.Dispose">
            <summary>
Clean up all managed and unmanaged resources.
</summary>
        </member>
        <member name="T:Hypertable.TableScanner">
            <summary>
Represents a table scanner.
</summary>
            <seealso cref="T:Hypertable.ITableScanner" />
        </member>
        <member name="M:Hypertable.ITableScanner.Next(Hypertable.Cell@)">
            <summary>
Gets the next available cell, creating a new cell instance.
</summary>
            <param name="cell">Scanned cell. This parameter is passed uninitialized.</param>
            <returns>true if there are more cells available, otherwise false.</returns>
            <remarks>
The methods returns a new cell instance.
</remarks>
        </member>
        <member name="M:Hypertable.ITableScanner.Next(Hypertable.Cell)">
            <summary>
Gets the next available cell using the specified cell instance.
</summary>
            <param name="cell">Cell instance.</param>
            <returns>true if there are more cells available, otherwise false.</returns>
            <remarks>
The methods updates the cell instance specified.
</remarks>
        </member>
        <member name="P:Hypertable.ITableScanner.IsDisposed">
            <summary>
Gets a value indicating whether the object has been disposed.
</summary>
            <remarks>true if the object has been disposed, otherwise false.</remarks>
        </member>
        <member name="P:Hypertable.ITableScanner.ScanSpec">
            <summary>
Gets the scan specification associated with this table scanner.
</summary>
            <remarks>
Modifiying the table scan specification once the table scanner has been created has no effect.
</remarks>
        </member>
        <member name="T:Hypertable.ITableScanner">
            <summary>
Defines a generalized table scanner.
</summary>
            <example>
The following example shows how to scan all cells of a table.
<code>
using( var scanner = table.CreateScanner() ) {
   foreach( cell cell in scanner ) {
      // process cell
   }
}
// or
using( var scanner = table.CreateScanner() ) {
   Cell cell;
   while( scanner.Next(out cell) ) {
      // process cell
   }
}
</code>
The following example shows how to scan all cells of a table using a single cell instance.
<code>
using( var scanner = table.CreateScanner() ) {
   Cell cell = new Cell();
   while( scanner.Next(cell) ) {
      // process cell
   }
}
</code></example>
            <seealso cref="P:Hypertable.ITableScanner.ScanSpec" />
            <seealso cref="T:Hypertable.Cell" />
        </member>
        <member name="M:ht4c.Common.Cells.clear">
            <summary>
Removes all cells from the collection.
</summary>
        </member>
        <member name="M:ht4c.Common.Cells.get_unchecked(System.UInt32,ht4c.Common.Cell*)">
            <summary>
Gets a cell at the specified index, without validating input paramters nor index bounderies.
</summary>
            <param name="n">Collection index</param>
            <param name="cell">Receives the cell at the specified index</param>
            <returns>true if succeeded</returns>
        </member>
        <member name="M:ht4c.Common.Cells.get(System.UInt32,ht4c.Common.Cell*)">
            <summary>
Gets a cell at the specified index.
</summary>
            <param name="n">Collection index</param>
            <param name="cell">Receives the cell at the specified index</param>
            <returns>true if succeeded</returns>
        </member>
        <member name="M:ht4c.Common.Cells.add(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt64,System.Void!System.Runtime.CompilerServices.IsConst*,System.UInt32,System.Byte)">
            <summary>
Returns a cell, constructed using the spoecified attributes, to the end of the collection.
</summary>
            <param name="row">Row key, mandatory</param>
            <param name="columnFamily">Column family, mandatory</param>
            <param name="columnQualifier">Column qualifier, might be NULL</param>
            <param name="timestamp">Timestamp, auto-assigned if 0</param>
            <param name="value">Cell value, might be NULL</param>
            <param name="valueLength">Cell value length</param>
            <param name="flag">Cell flag</param>
        </member>
        <member name="M:ht4c.Common.Cells.size">
            <summary>
Returns the number of cells actually contained in the collection.
</summary>
            <returns>Number of cells actually contained in the collection</returns>
        </member>
        <member name="M:ht4c.Common.Cells.Dispose">
            <summary>
Destroys the Cells instance.
</summary>
        </member>
        <member name="M:ht4c.Common.Cells.create(System.Int32)">
            <summary>
Creates a new Cells instance.
</summary>
            <param name="reserve">Initial capacity</param>
            <returns>New Cells instance</returns>
            <remarks>To free the created instance, the delete operator.</remarks>
        </member>
        <member name="T:ht4c.Common.Cells">
            <summary>
Represents a Hypertable cell collection.
</summary>
            <remarks>Links between native and C++/CLI.</remarks>
        </member>
        <member name="M:ht4c.Common.Cell.flag">
            <summary>
Returns the cell's flag.
</summary>
            <returns>Cell's flag</returns>
            <seealso cref="T:ht4c.Common.CellFlag" />
        </member>
        <member name="M:ht4c.Common.Cell.valueLength">
            <summary>
Returns the cell's value length.
</summary>
            <returns>Cell's value length</returns>
        </member>
        <member name="M:ht4c.Common.Cell.value">
            <summary>
Returns the cell's value.
</summary>
            <returns>Cell's value</returns>
            <remarks>Might be NULL</remarks>
        </member>
        <member name="M:ht4c.Common.Cell.timestamp">
            <summary>
Returns the cell's timestamp.
</summary>
            <returns>Cell's timestamp</returns>
            <remarks>Nanoseconds since 1970-01-01 00:00:00.0 UTC</remarks>
        </member>
        <member name="M:ht4c.Common.Cell.columnQualifier">
            <summary>
Returns the cell's column qualifier.
</summary>
            <returns>Cell's column qualifier</returns>
            <remarks>Might be NULL</remarks>
        </member>
        <member name="M:ht4c.Common.Cell.columnFamily">
            <summary>
Returns the cell's column family.
</summary>
            <returns>Cell's column family</returns>
        </member>
        <member name="M:ht4c.Common.Cell.row">
            <summary>
Returns the cell's row key.
</summary>
            <returns>Cell's row key</returns>
        </member>
        <member name="M:ht4c.Common.Cell.Dispose">
            <summary>
Destroys the Cell instance.
</summary>
        </member>
        <member name="M:ht4c.Common.Cell.create">
            <summary>
Creates a new Cell instance.
</summary>
            <returns>New Cell instance</returns>
            <remarks>To free the created instance, use the delete operator.</remarks>
        </member>
        <member name="T:ht4c.Common.Cell">
            <summary>
Represents a Hypertable cell, provide accessors to the cell attributes.
</summary>
            <remarks>Links between native and C++/CLI.</remarks>
        </member>
        <member name="M:ht4c.Common.Namespace.#ctor">
            <summary>
Creates a new Namespace instance.
</summary>
        </member>
        <member name="M:ht4c.Common.Namespace.validateTableName(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Validates a table name.
</summary>
            <param name="name">Table name</param>
            <remarks>Throws an exception if the table name is not valid.</remarks>
        </member>
        <member name="M:ht4c.Common.Namespace.query(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Executes a HQL query.
</summary>
            <param name="hql">Single HQL query</param>
            <returns>Resulting cells</returns>
            <remarks>To free the returned cells, use the delete operator.</remarks>
        </member>
        <member name="M:ht4c.Common.Namespace.exec(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Executes a HQL command.
</summary>
            <param name="hql">Single HQL command</param>
        </member>
        <member name="M:ht4c.Common.Namespace.getListing(System.Boolean,ht4c.Common.NamespaceListing*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Gets the namespace listing.
</summary>
            <param name="deep">If true all sub-namespaces and there containing tables/namespaces will be returned</param>
            <param name="nsListing">Receives the listing</param>
        </member>
        <member name="M:ht4c.Common.Namespace.getTableSchema(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Boolean)">
            <summary>
Returns the xml schema for an existing table.
</summary>
            <param name="name">Table name</param>
            <param name="withIds">Include the id's in the schema</param>
            <returns>xml schema</returns>
        </member>
        <member name="M:ht4c.Common.Namespace.existsTable(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Checks if a table exists.
</summary>
            <param name="name">Table name</param>
            <returns>true if the table exists</returns>
        </member>
        <member name="M:ht4c.Common.Namespace.dropTable(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Boolean)">
            <summary>
Drops a table.
</summary>
            <param name="name">Table name</param>
            <param name="ifExists">If true and the table does not exist the method won't fail</param>
        </member>
        <member name="M:ht4c.Common.Namespace.openTable(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Boolean)">
            <summary>
Opens an existing table.
</summary>
            <param name="name">Table name</param>
            <param name="force">If true any table caches will be bypassed</param>
            <returns>Opened table.</returns>
        </member>
        <member name="M:ht4c.Common.Namespace.renameTable(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Rename an existing table.
</summary>
            <param name="nameOld">Old table name</param>
            <param name="nameNew">New table name</param>
        </member>
        <member name="M:ht4c.Common.Namespace.alterTable(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Alter an existing table.
</summary>
            <param name="name">Table name</param>
            <param name="schema">Xml table name</param>
        </member>
        <member name="M:ht4c.Common.Namespace.createTableLike(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Creates a new table like another existing.
</summary>
            <param name="name">Table name</param>
            <param name="like">Name of another existing table</param>
        </member>
        <member name="M:ht4c.Common.Namespace.createTable(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Creates a new table.
</summary>
            <param name="name">Table name</param>
            <param name="schema">Xml table name</param>
        </member>
        <member name="M:ht4c.Common.Namespace.getName">
            <summary>
Returns the fully qualified namespace name.
</summary>
            <returns>Fully qualified namespace name</returns>
        </member>
        <member name="M:ht4c.Common.Namespace.Dispose">
            <summary>
Destroys the Namespace instance.
</summary>
        </member>
        <member name="T:ht4c.Common.Namespace">
            <summary>
Abstract class represents Hypertable namespace.
</summary>
        </member>
        <member name="M:ht4c.Common.NamespaceListing.addTable(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Adds a table name to the collection of table names.
</summary>
            <param name="table">Table name to add</param>
        </member>
        <member name="M:ht4c.Common.NamespaceListing.addNamespace(ht4c.Common.NamespaceListing!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Adds a sub-namespace listing to the collection of sub-namespace listings.
</summary>
            <param name="nsListing">Sub-namespace listing to add</param>
            <returns>Sub-namespace listing added</returns>
        </member>
        <member name="M:ht4c.Common.NamespaceListing.getTables">
            <summary>
Returns a collection of table names belonging to this namespace.
</summary>
            <returns>Collection of table names</returns>
        </member>
        <member name="M:ht4c.Common.NamespaceListing.getNamespaces">
            <summary>
Returns a collection of sub-namespace listings belonging to this namespace.
</summary>
            <returns>Collection of sub-namespace listings</returns>
        </member>
        <member name="M:ht4c.Common.NamespaceListing.getName">
            <summary>
Returns the namespace name.
</summary>
            <returns>Namespace name</returns>
        </member>
        <member name="M:ht4c.Common.NamespaceListing.Dispose">
            <summary>
Destroys the NamespaceListing instance.
</summary>
        </member>
        <member name="M:ht4c.Common.NamespaceListing.#ctor(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Initializes a new instance of the NamespaceListing class.
</summary>
            <param name="nsName">Namespace name</param>
        </member>
        <member name="D:ht4c.Common.NamespaceListing.namespaces_t">
            <summary>
Represents a list of namespace listings.
</summary>
        </member>
        <member name="D:ht4c.Common.NamespaceListing.tables_t">
            <summary>
Represents a list of table names.
</summary>
        </member>
        <member name="T:ht4c.Common.NamespaceListing">
            <summary>
Represents a namespace listing, provides tables and sub-namespace names on a namespace.
</summary>
        </member>
        <member name="M:Hypertable.CM2A.c_str">
            <summary>
Gets the unmanaged C string.
</summary>
            <returns>Unmanaged C string.</returns>
        </member>
        <member name="M:Hypertable.CM2A.op_Implicit~System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*">
            <summary>
Gets the unmanaged C string.
</summary>
            <returns>Unmanaged C string.</returns>
        </member>
        <member name="M:Hypertable.CM2A.Dispose">
            <summary>
Destroys the CM2A instance.
</summary>
        </member>
        <member name="M:Hypertable.CM2A.#ctor(System.String)">
            <summary>
Initializes a new instance of the CM2A class using a managed string.
</summary>
            <param name="string">Managed string.</param>
        </member>
        <member name="T:Hypertable.CM2A">
            <summary>
Converts a manages string into a unmanaged C string.
</summary>
        </member>
        <member name="T:Hypertable.ThriftBrokerException">
            <summary>
The exception that is thrown as the result of a thrift broker error.
</summary>
        </member>
        <member name="T:Hypertable.SerializationException">
            <summary>
The exception that is thrown as the result of a serialization error.
</summary>
        </member>
        <member name="T:Hypertable.MetaLogException">
            <summary>
The exception that is thrown as the result of a meta log error.
</summary>
        </member>
        <member name="T:Hypertable.RangeServerException">
            <summary>
The exception that is thrown as the result of a Hypertable range server error.
</summary>
        </member>
        <member name="T:Hypertable.MasterException">
            <summary>
The exception that is thrown as the result of a Hypertable master error.
</summary>
        </member>
        <member name="T:Hypertable.HyperspaceException">
            <summary>
The exception that is thrown as the result of a Hyperspace error.
</summary>
        </member>
        <member name="T:Hypertable.DfsBrokerException">
            <summary>
The exception that is thrown as the result of a DFS broker error.
</summary>
        </member>
        <member name="T:Hypertable.CommException">
            <summary>
The exception that is thrown as the result of a communication error.
</summary>
        </member>
        <member name="T:Hypertable.ConfigException">
            <summary>
The exception that is thrown as the result of a configuration error.
</summary>
        </member>
        <member name="T:Hypertable.ServerShuttingDownException">
            <summary>
The exception that is thrown if the server is shutting down.
</summary>
        </member>
        <member name="T:Hypertable.InducedFailureException">
            <summary>
The exception that is thrown as the result of an induced failure.
</summary>
        </member>
        <member name="T:Hypertable.NotAllowedException">
            <summary>
The exception that is thrown as the result of a not allowed operation.
</summary>
        </member>
        <member name="T:Hypertable.NoResponseException">
            <summary>
The exception that is thrown as the result of a missing response.
</summary>
        </member>
        <member name="T:Hypertable.NamespaceExistsException">
            <summary>
The exception that is thrown as the result of an existing namespace.
</summary>
        </member>
        <member name="T:Hypertable.BadNamespaceException">
            <summary>
The exception that is thrown as the result of a bad invalid namespace.
</summary>
        </member>
        <member name="T:Hypertable.NamespaceDoesNotExistsException">
            <summary>
The exception that is thrown if a namespace does not exist.
</summary>
        </member>
        <member name="T:Hypertable.NameAlreadyInUseException">
            <summary>
The exception that is thrown if a name is already in use.
</summary>
        </member>
        <member name="T:Hypertable.BloomFilterChecksumMismatchException">
            <summary>
The exception that is thrown as the result of an bloom filter checksum mismatch.
</summary>
        </member>
        <member name="T:Hypertable.EmptyBloomFilterException">
            <summary>
The exception that is thrown as the result of an empty bloom filter.
</summary>
        </member>
        <member name="T:Hypertable.DoubleUngetException">
            <summary>
The exception that is thrown as the result of double unget table scanner operation.
</summary>
        </member>
        <member name="T:Hypertable.SyntaxException">
            <summary>
The exception that is thrown as the result of a syntax failure.
</summary>
        </member>
        <member name="T:Hypertable.SchemaParseException">
            <summary>
The exception that is thrown as the result of a schema parse failure.
</summary>
        </member>
        <member name="T:Hypertable.CancelledException">
            <summary>
The exception that is thrown as the result of a cancelled operation.
</summary>
        </member>
        <member name="T:Hypertable.VersionMismatchException">
            <summary>
The exception that is thrown as the result of a version mismatch.
</summary>
        </member>
        <member name="T:Hypertable.BadScanSpecException">
            <summary>
The exception that is thrown as the result of an invalid scan spec.
</summary>
        </member>
        <member name="T:Hypertable.BadMemoryAllocationException">
            <summary>
The exception that is thrown as the result of a memory allocation failure.
</summary>
        </member>
        <member name="T:Hypertable.ConnectHyperspaceException">
            <summary>
The exception that is thrown as the result of a hyperspace connection failure.
</summary>
        </member>
        <member name="T:Hypertable.ConnectMasterException">
            <summary>
The exception that is thrown as the result of a master connection failure.
</summary>
        </member>
        <member name="T:Hypertable.CommandParseException">
            <summary>
The exception that is thrown as the result of a command parse error.
</summary>
        </member>
        <member name="T:Hypertable.BadDomainNameException">
            <summary>
The exception that is thrown as the result of an invalid domain name.
</summary>
        </member>
        <member name="T:Hypertable.TooManyColumnsException">
            <summary>
The exception that is thrown as the result of a too many columns.
</summary>
        </member>
        <member name="T:Hypertable.MalformedRequestException">
            <summary>
The exception that is thrown as the result of a mal formed request.
</summary>
        </member>
        <member name="T:Hypertable.TableNotFoundException">
            <summary>
The exception that is thrown if a table has not been found.
</summary>
        </member>
        <member name="T:Hypertable.FileNotFoundException">
            <summary>
The exception that is thrown if a file has not been found.
</summary>
        </member>
        <member name="T:Hypertable.HqlParseException">
            <summary>
The exception that is thrown as the result of an HQL parse error.
</summary>
        </member>
        <member name="T:Hypertable.MetadataNotFoundException">
            <summary>
The exception that is thrown if the meta data has not been found.
</summary>
        </member>
        <member name="T:Hypertable.BadKeyException">
            <summary>
The exception that is thrown as the result of an invalid key.
</summary>
        </member>
        <member name="T:Hypertable.InvalidMetadataException">
            <summary>
The exception that is thrown as the result of invalid meta data.
</summary>
        </member>
        <member name="T:Hypertable.BadSchemaException">
            <summary>
The exception that is thrown as the result of an invalid table schema.
</summary>
        </member>
        <member name="T:Hypertable.BadRootLocationException">
            <summary>
The exception that is thrown as the result of an invalid root location.
</summary>
        </member>
        <member name="T:Hypertable.IoException">
            <summary>
The exception that is thrown as the result of a IO failure.
</summary>
        </member>
        <member name="T:Hypertable.TimeoutException">
            <summary>
The exception that is thrown if an operation has been timed out.
</summary>
        </member>
        <member name="T:Hypertable.ResponseTruncatedException">
            <summary>
The exception that is thrown as the result of a truncated response.
</summary>
        </member>
        <member name="T:Hypertable.RequestTruncatedException">
            <summary>
The exception that is thrown as the result of a truncated request.
</summary>
        </member>
        <member name="T:Hypertable.ProtocolException">
            <summary>
The exception that is thrown as the result of a protocol failure.
</summary>
        </member>
        <member name="M:Hypertable.HypertableException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Initializes a new instance of the Exception class with serialized data.
</summary>
            <param name="info">The SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination. </param>
        </member>
        <member name="M:Hypertable.HypertableException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Sets the SerializationInfo with additional information about this exception instance.
</summary>
            <param name="info">The SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination. </param>
        </member>
        <member name="P:Hypertable.HypertableException.File">
            <summary>
Gets the source code file name where the error occured.
</summary>
        </member>
        <member name="P:Hypertable.HypertableException.Func">
            <summary>
Gets the function or method where the error occured.
</summary>
        </member>
        <member name="P:Hypertable.HypertableException.ErrorLine">
            <summary>
Gets the source code line where the error occured.
</summary>
        </member>
        <member name="P:Hypertable.HypertableException.ErrorCode">
            <summary>
Gets the internal Hypertable error code.
</summary>
        </member>
        <member name="T:Hypertable.HypertableException">
            <summary>
Represents the base class for all Hypertable exceptions.
</summary>
        </member>
        <member name="M:ht4c.Common.HypertableArgumentException.argument">
            <summary>
Returns the argument name.
</summary>
            <returns>Argument name</returns>
        </member>
        <member name="M:ht4c.Common.HypertableArgumentException.#ctor(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!Syste">
            <summary>
Initializes a new instance of the HypertableArgumentNullException.
</summary>
            <param name="msg">Error message</param>
            <param name="arg">Argument name</param>
            <param name="l">Error line</param>
            <param name="fn">Error function/method</param>
            <param name="fl">Source file</param>
        </member>
        <member name="T:ht4c.Common.HypertableArgumentException">
            <summary>
Represents a ht4c argument exception.
</summary>
            <remarks>Links between native and C++/CLI.</remarks>
        </member>
        <member name="M:ht4c.Common.HypertableArgumentNullException.#ctor(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Initializes a new instance of the HypertableArgumentNullException.
</summary>
            <param name="arg">Argument name</param>
            <param name="l">Error line</param>
            <param name="fn">Error function/method</param>
            <param name="fl">Source file</param>
        </member>
        <member name="T:ht4c.Common.HypertableArgumentNullException">
            <summary>
Represents a ht4c argument null exception.
</summary>
            <remarks>Links between native and C++/CLI.</remarks>
        </member>
        <member name="M:ht4c.Common.HypertableException.inner">
            <summary>
Returns the inner excpetion, might be NULL.
</summary>
            <returns>Inner exception</returns>
        </member>
        <member name="M:ht4c.Common.HypertableException.file">
            <summary>
Returns the error source filename.
</summary>
            <returns>Error source filename</returns>
        </member>
        <member name="M:ht4c.Common.HypertableException.func">
            <summary>
Returns the error function/method.
</summary>
            <returns>Error function/method</returns>
        </member>
        <member name="M:ht4c.Common.HypertableException.line">
            <summary>
Returns the error line.
</summary>
            <returns>Error line</returns>
        </member>
        <member name="M:ht4c.Common.HypertableException.code">
            <summary>
Returns the error code.
</summary>
            <returns>Error code</returns>
        </member>
        <member name="M:ht4c.Common.HypertableException.Dispose">
            <summary>
Destroys the HypertableException instance.
</summary>
        </member>
        <member name="M:ht4c.Common.HypertableException.#ctor(ht4c.Common.HypertableException!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Initializes a new instance of the HypertableException.
</summary>
            <param name="e">Other exception to copy</param>
        </member>
        <member name="M:ht4c.Common.HypertableException.#ctor(System.Int32,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Initializes a new instance of the HypertableException.
</summary>
            <param name="code">Error code</param>
            <param name="msg">Error message</param>
            <param name="l">Error line</param>
            <param name="fn">Error function/method</param>
            <param name="fl">Source file</param>
        </member>
        <member name="M:ht4c.Common.HypertableException.#ctor(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Initializes a new instance of the HypertableException.
</summary>
            <param name="msg">Error message</param>
        </member>
        <member name="M:ht4c.Common.HypertableException.#ctor">
            <summary>
Initializes a new empty instance of the HypertableException class.
</summary>
        </member>
        <member name="T:ht4c.Common.HypertableException">
            <summary>
Represents a ht4c hypertable exception.
</summary>
            <remarks>Links between native and C++/CLI.</remarks>
        </member>
        <member name="M:Hypertable.Cell.ToString">
            <summary>
Returns a string that represents the current object.
</summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="P:Hypertable.Cell.Flag">
            <summary>
Gets or sets the cell flag.
</summary>
            <seealso cref="T:Hypertable.CellFlag" />
        </member>
        <member name="P:Hypertable.Cell.Value">
            <summary>
Gets or sets the cell value, might be null.
</summary>
        </member>
        <member name="P:Hypertable.Cell.Key">
            <summary>
Gets or sets the cell key.
</summary>
            <seealso cref="P:Hypertable.Cell.Key" />
        </member>
        <member name="M:Hypertable.Cell.#ctor(Hypertable.Key,System.Byte[],Hypertable.CellFlag,System.Boolean)">
            <summary>
Initializes a new instance of the Cell class using the specified cell key, cell value and cell flag.
</summary>
            <param name="key">Cell key.</param>
            <param name="value">Cell value, might be null.</param>
            <param name="flag">Cell flag.</param>
            <param name="cloneKey">If true the constructor creates a deep copy if the specified cell key.</param>
            <seealso cref="P:Hypertable.Cell.Key" />
            <seealso cref="T:Hypertable.CellFlag" />
        </member>
        <member name="M:Hypertable.Cell.#ctor(Hypertable.Key,System.Byte[],Hypertable.CellFlag)">
            <summary>
Initializes a new instance of the Cell class using the specified cell key, cell value and cell flag.
</summary>
            <param name="key">Cell key.</param>
            <param name="value">Cell value, might be null.</param>
            <param name="flag">Cell flag.</param>
            <seealso cref="P:Hypertable.Cell.Key" />
            <seealso cref="T:Hypertable.CellFlag" />
        </member>
        <member name="M:Hypertable.Cell.#ctor(Hypertable.Key,Hypertable.CellFlag,System.Boolean)">
            <summary>
Initializes a new instance of the Cell class using the specified cell key and cell flag.
</summary>
            <param name="key">Cell key.</param>
            <param name="flag">Cell flag.</param>
            <param name="cloneKey">If true the constructor creates a deep copy if the specified cell key.</param>
            <seealso cref="P:Hypertable.Cell.Key" />
            <seealso cref="T:Hypertable.CellFlag" />
        </member>
        <member name="M:Hypertable.Cell.#ctor(Hypertable.Key,Hypertable.CellFlag)">
            <summary>
Initializes a new instance of the Cell class using the specified cell key and cell flag.
</summary>
            <param name="key">Cell key.</param>
            <param name="flag">Cell flag.</param>
            <seealso cref="P:Hypertable.Cell.Key" />
            <seealso cref="T:Hypertable.CellFlag" />
        </member>
        <member name="M:Hypertable.Cell.#ctor(Hypertable.Key,System.Byte[],System.Boolean)">
            <summary>
Initializes a new instance of the Cell class using the specified cell key and cell value.
</summary>
            <param name="key">Cell key.</param>
            <param name="value">Cell value, might be null.</param>
            <param name="cloneKey">If true the constructor creates a deep copy if the specified cell key.</param>
            <seealso cref="P:Hypertable.Cell.Key" />
        </member>
        <member name="M:Hypertable.Cell.#ctor(Hypertable.Key,System.Byte[])">
            <summary>
Initializes a new instance of the Cell class using the specified cell key and cell value.
</summary>
            <param name="key">Cell key.</param>
            <param name="value">Cell value, might be null.</param>
            <seealso cref="P:Hypertable.Cell.Key" />
        </member>
        <member name="M:Hypertable.Cell.#ctor">
            <summary>
Initializes a new instance of the Cell class.
</summary>
        </member>
        <member name="T:Hypertable.Cell">
            <summary>
Represents a Hypertable cell, provide accessors to the cell attributes.
</summary>
            <remarks>
Encapsulates cell key and cell value. The cell key identifies the location of the cell in a multi-dimensional table.
See also <a href="http://code.google.com/p/hypertable/wiki/ArchitecturalOverview" target="_blank">architectural overview</a>.
</remarks>
            <example>
The following example shows how to iterate through all cells of a table using only one Cell instance.
<code>
using( var scanner = table.CreateScanner() ) {
   Cell cell = new Cell();
   while( scanner.Next(cell) ) {
      // process cell
   }
}
</code>
The following example shows how to use the cloneKey parameter.
<code>
Key key = new Key() { ColumnFamily = "cf" };
IList&lt;Cell&gt; cells = new List&lt;Cell&gt;();
for( int n = 0; n &lt; 10; ++n ) {
   key.Row = Guid.NewGuid().ToString();
   cells.Add(new Cell(key, Encoding.UTF8.GetBytes(key.Row), true)); // creates a key clone
}
</code></example>
            <seealso cref="P:Hypertable.Cell.Key" />
        </member>
        <member name="T:Hypertable.CellFlag">
            <summary>
Specifies possible cell flag values.
</summary>
            <remarks>
The delete flags are used by the table mutator.
</remarks>
            <example>
The following example shows how to delete two rows from a table using the cell flags.
<code>
IList&lt;Cell&gt; cells = new List&lt;Cell&gt;();
cells.Add( new Cell(new Key("A"), CellFlag.DeleteRow) );
cells.Add( new Cell(new Key("B"), CellFlag.DeleteRow) );
using( var mutator = table.CreateMutator() ) {
   mutator.Set(cells);
}
</code></example>
            <seealso cref="T:Hypertable.ITableMutator" />
        </member>
        <member name="F:Hypertable.CellFlag.DeleteCellVersion">
            <summary>
Deletes a particular cell version.
</summary>
        </member>
        <member name="F:Hypertable.CellFlag.DeleteCell">
            <summary>
Deletes a particular cell.
</summary>
        </member>
        <member name="F:Hypertable.CellFlag.DeleteColumnFamily">
            <summary>
Deletes all cells in a particular row/column family.
</summary>
        </member>
        <member name="F:Hypertable.CellFlag.DeleteRow">
            <summary>
Deletes all cells in a particular row.
</summary>
        </member>
        <member name="F:Hypertable.CellFlag.Default">
            <summary>
Default cell flag.
</summary>
        </member>
        <member name="T:ht4c.Common.CellFlag">
            <summary>
Specifies possible Hypertable cell flag values.
</summary>
        </member>
        <member name="M:Hypertable.Table.ToString">
            <summary>
Returns a string that represents the current object.
</summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:Hypertable.Table.Finalize">
            <summary>
Clean up all unmanaged resources.
</summary>
        </member>
        <member name="M:Hypertable.Table.Dispose">
            <summary>
Clean up all managed and unmanaged resources.
</summary>
        </member>
        <member name="T:Hypertable.Table">
            <summary>
Represents a Hypertable table.
</summary>
            <seealso cref="T:Hypertable.ITable" />
        </member>
        <member name="M:Hypertable.ITable.BeginScan(Hypertable.AsyncResult,Hypertable.ScanSpec,System.Object,Hypertable.AsyncScannerCallback)">
            <summary>
Creates a new asynchronous scanner on this table using the specified scanner specification
and attach to the specified asynchronous result instance.
</summary>
            <param name="asyncResult">Asynchronous result instance.</param>
            <param name="scanSpec">Table scanner specification.</param>
            <param name="param">User defined parameter, which will be passed to the callback.</param>
            <param name="callback">Asynchronous scanner callback.</param>
            <returns>Asynchronous scanner identifier.</returns>
        </member>
        <member name="M:Hypertable.ITable.BeginScan(Hypertable.AsyncResult,Hypertable.ScanSpec,Hypertable.AsyncScannerCallback)">
            <summary>
Creates a new asynchronous scanner on this table using the specified scanner specification
and attach it to the specified asynchronous result instance.
</summary>
            <param name="asyncResult">Asynchronous result instance.</param>
            <param name="scanSpec">Table scanner specification.</param>
            <param name="callback">Asynchronous scanner callback.</param>
            <returns>Asynchronous scanner identifier.</returns>
        </member>
        <member name="M:Hypertable.ITable.BeginScan(Hypertable.AsyncResult,Hypertable.AsyncScannerCallback)">
            <summary>
Creates a new asynchronous scanner on this table and attach it
to the specified asynchronous result instance.
</summary>
            <param name="asyncResult">Asynchronous result instance.</param>
            <param name="callback">Asynchronous scanner callback.</param>
            <returns>Asynchronous scanner identifier.</returns>
            <remarks>Scans the entire table.</remarks>
        </member>
        <member name="M:Hypertable.ITable.BeginScan(Hypertable.AsyncResult,Hypertable.ScanSpec,System.Object)">
            <summary>
Creates a new asynchronous scanner on this table using the specified scanner specification
and attach to the specified asynchronous result instance.
</summary>
            <param name="asyncResult">Asynchronous result instance.</param>
            <param name="scanSpec">Table scanner specification.</param>
            <param name="param">User defined parameter, which will be passed to the callback.</param>
            <returns>Asynchronous scanner identifier.</returns>
        </member>
        <member name="M:Hypertable.ITable.BeginScan(Hypertable.AsyncResult,Hypertable.ScanSpec)">
            <summary>
Creates a new asynchronous scanner on this table using the specified scanner specification
and attach it to the specified asynchronous result instance.
</summary>
            <param name="asyncResult">Asynchronous result instance.</param>
            <param name="scanSpec">Table scanner specification.</param>
            <returns>Asynchronous scanner identifier.</returns>
        </member>
        <member name="M:Hypertable.ITable.BeginScan(Hypertable.AsyncResult)">
            <summary>
Creates a new asynchronous scanner on this table and attach it
to the specified asynchronous result instance.
</summary>
            <param name="asyncResult">Asynchronous result instance.</param>
            <returns>Asynchronous scanner identifier.</returns>
            <remarks>Scans the entire table.</remarks>
        </member>
        <member name="M:Hypertable.ITable.CreateScanner(Hypertable.ScanSpec)">
            <summary>
Creates a new table scanner on this table using the specified scanner specification.
</summary>
            <param name="scanSpec">Table scanner specification.</param>
            <returns>Newly created table mutator instance.</returns>
        </member>
        <member name="M:Hypertable.ITable.CreateScanner">
            <summary>
Creates a new table scanner on this table.
</summary>
            <returns>Newly created table scanner instance.</returns>
        </member>
        <member name="M:Hypertable.ITable.CreateAsyncMutator(Hypertable.AsyncResult,Hypertable.MutatorSpec)">
            <summary>
Creates a new asynchronous table mutator on this table using the specified mutator specification.
</summary>
            <param name="asyncResult">Asynchronous result instance.</param>
            <param name="mutatorSpec">Table mutator specification.</param>
            <returns>Newly created asynchronous table mutator instance.</returns>
        </member>
        <member name="M:Hypertable.ITable.CreateMutator(Hypertable.MutatorSpec)">
            <summary>
Creates a new table mutator on this table using the specified mutator specification.
</summary>
            <param name="mutatorSpec">Table mutator specification.</param>
            <returns>Newly created table mutator instance.</returns>
        </member>
        <member name="M:Hypertable.ITable.CreateMutator">
            <summary>
Creates a new table mutator on this table.
</summary>
            <returns>Newly created table mutator.</returns>
        </member>
        <member name="P:Hypertable.ITable.IsDisposed">
            <summary>
Gets a value indicating whether the object has been disposed.
</summary>
            <remarks>true if the object has been disposed, otherwise false.</remarks>
        </member>
        <member name="P:Hypertable.ITable.Schema">
            <summary>
Gets the table xml schema.
</summary>
        </member>
        <member name="P:Hypertable.ITable.Name">
            <summary>
Gets the table name.
</summary>
        </member>
        <member name="T:Hypertable.ITable">
            <summary>
Represents a Hypertable table.
</summary>
            <example>
The following example shows how to create an asynchronous table mutator.
<code>
using( var mutator = table.CreateMutator(MutatorSpec.CreateAsync()) ) {
  // use mutator
}
</code>
The following example shows how to scan a few individual rows.
<code>
var scanSpec = new ScanSpec()
                   .AddRow("r1")
                   .AddRow("r2")
                   .AddRow("r3");

using( var scanner = table.CreateScanner(scanSpec) ) {
   foreach( var cell in scanner ) {
      // process cell
   }
}
</code>
The following example shows how to scan a single table asynchronously.
<code>
using( var asynResult = table.BeginScan(param,
   delegate( AsyncScannerContext asyncScannerContext, IList&lt;Cell&gt; cells ) {
      // process cells
      return true; // continue, return false to cancel
   }) ) {
   asynResult.Join();
}
</code>
The following example shows how to scan a multiple tables asynchronously.
<code>
using( var asynResult = new AsyncResult(
   delegate( AsyncScannerContext asyncScannerContext, IList&lt;Cell&gt; cells ) {
      // process cells
      return true; // continue, return false to cancel
   }) ) {
   tableA.BeginScan(new ScanSpec().AddColumn("a"), asynResult);
   tableB.BeginScan(new ScanSpec().AddColumn("b"), asynResult);
   asynResult.Join();
 }
</code>
The following example shows how to scan a multiple tables asynchronously
using a blocking asynchronous result.
<code>
using( var asynResult = new BlockingAsyncResult() ) {
   tableA.BeginScan(asynResult);
   tableB.BeginScan(asynResult);
   AsyncScannerContext asyncScannerContext;
   IList&lt;Cell&gt; cells;
   while( asynResult.TryGetCells(out asyncScannerContext, out cells) ) {
      foreach( Cell cell in cells ) {
         // process cell
      }
   }
}
</code></example>
        </member>
        <member name="T:Hypertable.AsyncScannerCallback">
            <summary>
Represents a callback method to be executed by an asynchronous table scan operation.
</summary>
            <param name="ctx">Asynchronous table scanner context.</param>
            <param name="cells">Scanned cells.</param>
            <returns>The asynchronous table scanner callback result.</returns>
            <seealso cref="T:Hypertable.AsyncScannerContext" />
            <seealso cref="T:Hypertable.AsyncCallbackResult" />
        </member>
        <member name="T:Hypertable.AsyncCallbackResult">
            <summary>
Specifies the asynchronous callback results.
</summary>
        </member>
        <member name="F:Hypertable.AsyncCallbackResult.Abort">
            <summary>
Abort the entire asynchronous operation.
</summary>
        </member>
        <member name="F:Hypertable.AsyncCallbackResult.Cancel">
            <summary>
Cancel the actual asynchronous provider.
</summary>
        </member>
        <member name="F:Hypertable.AsyncCallbackResult.Continue">
            <summary>
Continue with the asynchronous operation.
</summary>
        </member>
        <member name="T:ht4c.Common.AsyncCallbackResult">
            <summary>
Specifies the asynchronous callback results.
</summary>
        </member>
        <member name="M:Hypertable.Context.Finalize">
            <summary>
Clean up all unmanaged resources.
</summary>
        </member>
        <member name="M:Hypertable.Context.Dispose">
            <summary>
Clean up all managed and unmanaged resources.
</summary>
        </member>
        <member name="M:Hypertable.Context.HasFeature(Hypertable.ContextFeature)">
            <summary>
Returns true if the actual provider supports the feature specified, otherwise false.
</summary>
            <param name="contextFeature">Context feature.</param>
            <returns>true if the actual provider supports the feature specified, otherwise false.</returns>
            <seealso cref="T:Hypertable.ContextFeature" />
        </member>
        <member name="M:Hypertable.Context.CreateClient">
            <summary>
Creates a new Client instance.
</summary>
            <returns>New Client instance.</returns>
            <seealso cref="T:Hypertable.IClient" />
        </member>
        <member name="M:Hypertable.Context.UnregisterProvider(System.String)">
            <summary>
Unregisters a custom context provider.
</summary>
            <param name="providerName">Provider name.</param>
            <returns>true if the provoder with the name specified has been removed, otherwise false.</returns>
        </member>
        <member name="M:Hypertable.Context.RegisterProvider(System.String,System.Func{System.Collections.Generic.IDictionary{System.String,System.Object},Hypertable.IContext})">
            <summary>
Registers a custom context provider.
</summary>
            <param name="providerName">Provider name.</param>
            <param name="provider">Provider function.</param>
        </member>
        <member name="M:Hypertable.Context.Create(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
Creates a new Context instance using specified configuration properties.
</summary>
            <param name="connectionString">Connection string.</param>
            <param name="properties">Configuration properties, might overwrite those properties from connection string.</param>
            <returns>New Context instance.</returns>
            <remarks>
Following property types will be forwarded to the native ht4c providers:
<table class="comment"><tr><td>string</td><td>IEnumerable&lt;string&gt;</td></tr><tr><td>int</td><td>IEnumerable&lt;int&gt;</td></tr><tr><td>long</td><td>IEnumerable&lt;long&gt;</td></tr><tr><td>ushort</td></tr><tr><td>double</td><td>IEnumerable&lt;double&gt;</td></tr><tr><td>bool</td></tr></table></remarks>
        </member>
        <member name="M:Hypertable.Context.Create(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
Creates a new Context instance using specified configuration properties.
</summary>
            <param name="properties">Configuration properties.</param>
            <returns>New Context instance.</returns>
            <remarks>
Following property types will be forwarded to the native ht4c providers:
<table class="comment"><tr><td>string</td><td>IEnumerable&lt;string&gt;</td></tr><tr><td>int</td><td>IEnumerable&lt;int&gt;</td></tr><tr><td>long</td><td>IEnumerable&lt;long&gt;</td></tr><tr><td>ushort</td></tr><tr><td>double</td><td>IEnumerable&lt;double&gt;</td></tr><tr><td>bool</td></tr></table></remarks>
        </member>
        <member name="M:Hypertable.Context.Create(System.String)">
            <summary>
Creates a new Context instance using specified connection string.
</summary>
            <param name="connectionString">Connection string.</param>
            <returns>New Context instance.</returns>
        </member>
        <member name="P:Hypertable.Context.IsDisposed">
            <summary>
Gets a value indicating whether the object has been disposed.
</summary>
            <remarks>true if the object has been disposed, otherwise false.</remarks>
        </member>
        <member name="P:Hypertable.Context.Properties">
            <summary>
Gets the configuration properties.
</summary>
            <remarks>
Following property types will be forwarded to the native ht4c providers:
<table class="comment"><tr><td>string</td><td>IEnumerable&lt;string&gt;</td></tr><tr><td>int</td><td>IEnumerable&lt;int&gt;</td></tr><tr><td>long</td><td>IEnumerable&lt;long&gt;</td></tr><tr><td>ushort</td></tr><tr><td>double</td><td>IEnumerable&lt;double&gt;</td></tr><tr><td>bool</td></tr></table></remarks>
        </member>
        <member name="T:Hypertable.Context">
            <summary>
Represents a Hypertable context factory.
</summary>
            <remarks>
Default initialization of the Hypertable context uses the configuration (conf/hypertable.cfg) of
the executing process if exist.
</remarks>
            <example>
The following example shows how to create a Hypertable context.
<code>
using( var ctx = Context.Create("Provider=Hyper; Uri=localhost") ) {
   using( var client = ctx.CreateClient() ) {
      // use client
   }
}
</code>
The following example shows how to create a Hypertable context using configuration properties.
<code>
IDictionary&lt;string, object&gt; properties = new Dictionary&lt;string, object&gt;();
properties.Add("Hypertable.Logging.Level", "info");
using( var ctx = Context.Create("Provider=Hyper; Uri=localhost", properties) ) {
   using( var client = ctx.CreateClient() ) {
      // use client
   }
}
</code>
The following example shows how to create a Hypertable context using an external configuration file.
<code>
using( var ctx = Context.Create("Provider=Hyper; Uri=localhost; config=TestConfiguration.cfg") ) {
   using( var client = ctx.CreateClient() ) {
      // use client
   }
}
</code>
The following example shows how to access the configuration properties.
<code>
using( var ctx = Context.Create("Provider=Thrift; Uri=localhost") ) {
   int thriftBrokerTimeout = (int)ctx.Properties["ThriftBroker.Timeout"];
}
</code></example>
            <seealso cref="T:Hypertable.IContext" />
        </member>
        <member name="M:Hypertable.IContext.HasFeature(Hypertable.ContextFeature)">
            <summary>
Returns true if the actual provider supports the feature specified, otherwise false.
</summary>
            <param name="contextFeature">Context feature.</param>
            <returns>true if the actual provider supports the feature specified, otherwise false.</returns>
            <seealso cref="T:Hypertable.ContextFeature" />
        </member>
        <member name="M:Hypertable.IContext.CreateClient">
            <summary>
Creates a new Client instance.
</summary>
            <returns>New Client instance.</returns>
            <seealso cref="T:Hypertable.IClient" />
        </member>
        <member name="P:Hypertable.IContext.IsDisposed">
            <summary>
Gets a value indicating whether the object has been disposed.
</summary>
            <remarks>true if the object has been disposed, otherwise false.</remarks>
        </member>
        <member name="P:Hypertable.IContext.Properties">
            <summary>
Gets the configuration properties.
</summary>
            <remarks>
Following property types will be forwarded to the native ht4c providers:
<table class="comment"><tr><td>string</td><td>IEnumerable&lt;string&gt;</td></tr><tr><td>int</td><td>IEnumerable&lt;int&gt;</td></tr><tr><td>long</td><td>IEnumerable&lt;long&gt;</td></tr><tr><td>ushort</td></tr><tr><td>double</td><td>IEnumerable&lt;double&gt;</td></tr><tr><td>bool</td></tr></table></remarks>
        </member>
        <member name="T:Hypertable.IContext">
            <summary>
Represents a Hypertable context, handles the connection to the storage provider instance.
</summary>
            <remarks>
Default initialization of the Hypertable context uses the configuration (conf/hypertable.cfg) of
the executing process if exist.
</remarks>
            <example>
The following example shows how to create a Hypertable context.
<code>
using( var ctx = Context.Create("Provider=Hyper; Uri=localhost") ) {
   using( var client = ctx.CreateClient() ) {
      // use client
   }
}
</code>
The following example shows how to create a Hypertable context using configuration properties.
<code>
IDictionary&lt;string, object&gt; properties = new Dictionary&lt;string, object&gt;();
properties.Add("Hypertable.Logging.Level", "info");
using( var ctx = Context.Create("Provider=Hyper; Uri=localhost", properties) ) {
   using( var client = ctx.CreateClient() ) {
      // use client
   }
}
</code>
The following example shows how to create a Hypertable context using an external configuration file.
<code>
using( var ctx = Context.Create("Provider=Hyper; Uri=localhost; config=TestConfiguration.cfg") ) {
   using( var client = ctx.CreateClient() ) {
      // use client
   }
}
</code>
The following example shows how to access the configuration properties.
<code>
using( var ctx = Context.Create("Provider=Thrift; Uri=localhost") ) {
   int thriftBrokerTimeout = (int)ctx.Properties["ThriftBroker.Timeout"];
}
</code></example>
        </member>
        <member name="T:Hypertable.ContextFeature">
            <summary>
Declares extended context features, apart from the regular features.
</summary>
        </member>
        <member name="F:Hypertable.ContextFeature.AsyncTableScanner">
            <summary>
Asynchronous table scanner.
</summary>
        </member>
        <member name="F:Hypertable.ContextFeature.PeriodicFlushTableMutator">
            <summary>
Periodic flush mutator.
</summary>
        </member>
        <member name="F:Hypertable.ContextFeature.AsyncTableMutator">
            <summary>
Asynchronous table mutator.
</summary>
        </member>
        <member name="F:Hypertable.ContextFeature.HQL">
            <summary>
Hypertable query language (HQL).
</summary>
        </member>
        <member name="F:Hypertable.ContextFeature.Unknown">
            <summary>
Unknown provider feature.
</summary>
        </member>
        <member name="T:ht4c.Common.ContextFeature">
            <summary>
Declares extended context features, apart from the regular features.
</summary>
        </member>
        <member name="F:CF_PeriodicFlushTableMutator">
            <summary>
Asynchronous table scanner.
</summary>
        </member>
        <member name="F:CF_AsyncTableMutator">
            <summary>
Periodic flush mutator.
</summary>
        </member>
        <member name="F:CF_HQL">
            <summary>
Asynchronous table mutator.
</summary>
        </member>
        <member name="F:CF_Unknown">
            <summary>
Unknown provider feature.
</summary>
            <summary>
Hypertable query language (HQL).
</summary>
        </member>
        <member name="M:Hypertable.NamespaceListing.ToString">
            <summary>
Returns a string that represents the current object.
</summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="P:Hypertable.NamespaceListing.Tables">
            <summary>
Gets all table names.
</summary>
        </member>
        <member name="P:Hypertable.NamespaceListing.Namespaces">
            <summary>
Gets all sub namespace listings.
</summary>
        </member>
        <member name="P:Hypertable.NamespaceListing.Parent">
            <summary>
Gets the parent namespace listing or null for the root namespace.
</summary>
        </member>
        <member name="P:Hypertable.NamespaceListing.FullName">
            <summary>
Gets the full namespace name.
</summary>
        </member>
        <member name="P:Hypertable.NamespaceListing.Name">
            <summary>
Gets the namespace name.
</summary>
        </member>
        <member name="T:Hypertable.NamespaceListing">
            <summary>
Represents a Hypertable namespace listing.
</summary>
            <example>
The following example shows how to get the entire databse namespace listing.
<code>
using( var ctx = Context.Create("Provider=Hyper; Uri=localhost") ) {
   using( var client = ctx.CreateClient() ) {
      using( var ns = client.OpenNamespace("/") ) {
         var nsListing = ns.GetListing(true);
          // use name space listing
      }
   }
}



</code></example>
            <seealso cref="T:Hypertable.INamespace" />
        </member>
        <member name="M:Hypertable.Namespace.ToString">
            <summary>
Returns a string that represents the current object.
</summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:Hypertable.Namespace.Finalize">
            <summary>
Clean up all unmanaged resources.
</summary>
        </member>
        <member name="M:Hypertable.Namespace.Dispose">
            <summary>
Clean up all managed and unmanaged resources.
</summary>
        </member>
        <member name="T:Hypertable.Namespace">
            <summary>
Represents a Hypertable namespace.
</summary>
            <seealso cref="T:Hypertable.INamespace" />
        </member>
        <member name="M:Hypertable.INamespace.Query(System.String)">
            <summary>
Executes a HQL query.
</summary>
            <param name="hql">HQL query.</param>
            <returns>Resulting cells.</returns>
            <remarks>
Use ';' to separate multiple HQL queries.
</remarks>
        </member>
        <member name="M:Hypertable.INamespace.Exec(System.String)">
            <summary>
Executes a HQL command.
</summary>
            <param name="hql">HQL command.</param>
            <remarks>
Use ';' to separate multiple HQL commands.
</remarks>
        </member>
        <member name="M:Hypertable.INamespace.GetListing(System.Boolean)">
            <summary>
Gets the namespace listing.
</summary>
            <param name="deep">If true all sub-namespaces and there containing tables/namespaces will be returned.</param>
            <returns>Namespace listing.</returns>
        </member>
        <member name="M:Hypertable.INamespace.GetListing">
            <summary>
Gets the namespace listing.
</summary>
            <returns>Namespace listing.</returns>
        </member>
        <member name="M:Hypertable.INamespace.NamespaceExists(System.String)">
            <summary>
Checks if a sub namespace exists.
</summary>
            <param name="name">Namespace name.</param>
            <returns>true if the namespace exists.</returns>
            <remarks>
Use '/' separator character to separate namespace names. Namespace names are case sensitive.
</remarks>
        </member>
        <member name="M:Hypertable.INamespace.DropNamespaces(System.Text.RegularExpressions.Regex,Hypertable.DropDispositions)">
            <summary>
Drops existing sub namespaces.
</summary>
            <param name="regex">Regular expression to match the sub namespace names.</param>
            <param name="dispo">Defines details for the drop operation.</param>
        </member>
        <member name="M:Hypertable.INamespace.DropNamespaces(Hypertable.DropDispositions)">
            <summary>
Drops all sub namespaces.
</summary>
            <param name="dispo">Defines details for the drop operation.</param>
        </member>
        <member name="M:Hypertable.INamespace.DropNamespace(System.String,Hypertable.DropDispositions)">
            <summary>
Drops an existing sub namespace.
</summary>
            <param name="name">Namespace name.</param>
            <param name="dispo">Defines details for the drop operation.</param>
            <remarks>
Use '/' separator character to separate namespace names. Namespace names are case sensitive.
</remarks>
            <seealso cref="T:Hypertable.DropDispositions" />
        </member>
        <member name="M:Hypertable.INamespace.DropNamespace(System.String)">
            <summary>
Drops an existing sub namespace.
</summary>
            <param name="name">Namespace name.</param>
            <remarks>
Use '/' separator character to separate namespace names. Fails if the namespace
is not empty. Namespace names are case sensitive.
</remarks>
        </member>
        <member name="M:Hypertable.INamespace.OpenNamespace(System.String,Hypertable.OpenDispositions)">
            <summary>
Opens or create a sub namespace.
</summary>
            <param name="name">Namespace name.</param>
            <param name="dispo">An action to take if the namespace exists or does not exist.</param>
            <returns>Opened namespace.</returns>
            <remarks>
Use '/' separator character to separate namespace names. Namespace names are case sensitive.
</remarks>
            <seealso cref="T:Hypertable.OpenDispositions" />
        </member>
        <member name="M:Hypertable.INamespace.OpenNamespace(System.String)">
            <summary>
Opens an existig sub namespace.
</summary>
            <param name="name">Namespace name.</param>
            <returns>Opened namespace.</returns>
            <remarks>
Use '/' separator character to separate namespace names. Namespace names are case sensitive.
</remarks>
        </member>
        <member name="M:Hypertable.INamespace.CreateNamespace(System.String,Hypertable.CreateDispositions)">
            <summary>
Creates a new sub namespace.
</summary>
            <param name="name">Namespace name.</param>
            <param name="dispo">An action to take if the namespace exists or does not exist.</param>
            <remarks>
Use '/' separator character to separate namespace names. Namespace names are case sensitive.
</remarks>
            <seealso cref="T:Hypertable.CreateDispositions" />
        </member>
        <member name="M:Hypertable.INamespace.CreateNamespace(System.String)">
            <summary>
Creates a new sub namespace.
</summary>
            <param name="name">Namespace name.</param>
            <remarks>
Use '/' separator character to separate namespace names. Fails if the namespace already exist or
intermediate namespaces do not exist. Namespace names are case sensitive.
</remarks>
        </member>
        <member name="M:Hypertable.INamespace.GetTableSchema(System.String,System.Boolean)">
            <summary>
Returns the xml table schema for the specified table.
</summary>
            <param name="name">Table name.</param>
            <param name="withIds">Include generation and column family ID attributes.</param>
            <returns>XML table schema.</returns>
        </member>
        <member name="M:Hypertable.INamespace.GetTableSchema(System.String)">
            <summary>
Returns the xml table schema for the specified table.
</summary>
            <param name="name">Table name.</param>
            <returns>XML table schema.</returns>
        </member>
        <member name="M:Hypertable.INamespace.TableExists(System.String)">
            <summary>
Checks if a table exists in this namespace.
</summary>
            <param name="name">Table name.</param>
            <returns>true if the table exists.</returns>
        </member>
        <member name="M:Hypertable.INamespace.DropTables(System.Text.RegularExpressions.Regex,Hypertable.DropDispositions)">
            <summary>
Drops existing tables.
</summary>
            <param name="regex">Regular expression to match the table names.</param>
            <param name="dispo">Defines details for the drop operation.</param>
            <seealso cref="T:Hypertable.DropDispositions" />
        </member>
        <member name="M:Hypertable.INamespace.DropTables">
            <summary>
Drops all tables in this namespace.
</summary>
        </member>
        <member name="M:Hypertable.INamespace.DropTable(System.String,Hypertable.DropDispositions)">
            <summary>
Drops an existing table.
</summary>
            <param name="name">Table name.</param>
            <param name="dispo">Defines details for the drop operation.</param>
            <seealso cref="T:Hypertable.DropDispositions" />
        </member>
        <member name="M:Hypertable.INamespace.DropTable(System.String)">
            <summary>
Drops a table.
</summary>
            <param name="name">Table name</param>
        </member>
        <member name="M:Hypertable.INamespace.OpenTable(System.String,System.String,Hypertable.OpenDispositions)">
            <summary>
Opens or create a table.
</summary>
            <param name="name">Table name</param>
            <param name="schema">XML table schema</param>
            <param name="dispo">An action to take if the table exists or does not exist.</param>
            <returns>Opened table.</returns>
            <seealso cref="T:Hypertable.OpenDispositions" />
        </member>
        <member name="M:Hypertable.INamespace.OpenTable(System.String,Hypertable.OpenDispositions)">
            <summary>
Opens an existing table.
</summary>
            <param name="name">Table name</param>
            <param name="dispo">An action to take if the table exists or does not exist.</param>
            <returns>Opened table.</returns>
            <seealso cref="T:Hypertable.OpenDispositions" />
        </member>
        <member name="M:Hypertable.INamespace.OpenTable(System.String)">
            <summary>
Opens an existing table.
</summary>
            <param name="name">Table name</param>
            <returns>Opened table.</returns>
        </member>
        <member name="M:Hypertable.INamespace.RenameTable(System.String,System.String)">
            <summary>
Rename an existing table.
</summary>
            <param name="nameOld">Old table name</param>
            <param name="nameNew">New table name</param>
        </member>
        <member name="M:Hypertable.INamespace.AlterTable(System.String,System.String)">
            <summary>
Alter an existing table.
</summary>
            <param name="name">Table name</param>
            <param name="schema">XML table schema</param>
        </member>
        <member name="M:Hypertable.INamespace.CreateTableLike(System.String,System.String,Hypertable.CreateDispositions)">
            <summary>
Creates a new table like another existing.
</summary>
            <param name="name">Table name</param>
            <param name="like">Name of another existing table</param>
            <param name="dispo">An action to take if the table exists or does not exist.</param>
            <seealso cref="T:Hypertable.CreateDispositions" />
        </member>
        <member name="M:Hypertable.INamespace.CreateTableLike(System.String,System.String)">
            <summary>
Creates a new table like another existing.
</summary>
            <param name="name">Table name</param>
            <param name="like">Name of another existing table</param>
        </member>
        <member name="M:Hypertable.INamespace.CreateTable(System.String,System.String,Hypertable.CreateDispositions)">
            <summary>
Creates a new table.
</summary>
            <param name="name">Table name</param>
            <param name="schema">XML table schema</param>
            <param name="dispo">An action to take if the table exists or does not exist.</param>
            <seealso cref="T:Hypertable.CreateDispositions" />
        </member>
        <member name="M:Hypertable.INamespace.CreateTable(System.String,System.String)">
            <summary>
Creates a new table.
</summary>
            <param name="name">Table name</param>
            <param name="schema">XML table schema</param>
        </member>
        <member name="P:Hypertable.INamespace.IsDisposed">
            <summary>
Gets a value indicating whether the object has been disposed.
</summary>
            <remarks>true if the object has been disposed, otherwise false.</remarks>
        </member>
        <member name="P:Hypertable.INamespace.Tables">
            <summary>
Gets all table names.
</summary>
        </member>
        <member name="P:Hypertable.INamespace.Namespaces">
            <summary>
Gets all sub namespace names.
</summary>
        </member>
        <member name="P:Hypertable.INamespace.Name">
            <summary>
Gets the namespace name.
</summary>
        </member>
        <member name="T:Hypertable.INamespace">
            <summary>
Represents a Hypertable namespace, provides methods to handle Hypertable tables.
</summary>
            <example>
The following example shows how to create a table using the xml schema.
<code>
string schema = 
   "&lt;Schema&gt;"
+     "&lt;AccessGroup name=\"default\"&gt;"
+     "&lt;ColumnFamily&gt;"
+         "&lt;Name&gt;cf&lt;/Name&gt;"
+         "&lt;deleted&gt;false&lt;/deleted&gt;"
+     "&lt;/ColumnFamily&gt;"
+     "&lt;/AccessGroup&gt;"
+ "&lt;/Schema&gt;";

using( var ctx = Context.Create("Provider=Hyper; Uri=localhost") ) {
   using( var client = ctx.CreateClient() ) {
      using( var ns = client.OpenNamespace("test", OpenDispositions.OpenAlways) ) {
         using( Table table = ns.OpenTable("t1", schema, OpenDispositions.OpenAlways) ) {
            // use table
         }
      }
   }
}
</code>
The following example shows how to create a table using HQL.
<code>
using( var ctx = Context.Create("Provider=Hyper; Uri=localhost") ) {
   using( var client = ctx.CreateClient() ) {
      using( var ns = client.OpenNamespace("test", OpenDispositions.OpenAlways) ) {
         if( !table.TableExists("t1") ) {
            ns.Exec("CREATE TABLE t1 (cf)");
         }
         using( var table = ns.OpenTable("t1") ) {
            // use table
         }
      }
   }
}
</code></example>
        </member>
        <member name="M:Hypertable.Client.Finalize">
            <summary>
Clean up all unmanaged resources.
</summary>
        </member>
        <member name="M:Hypertable.Client.Dispose">
            <summary>
Clean up all managed and unmanaged resources.
</summary>
        </member>
        <member name="T:Hypertable.Client">
            <summary>
Represents a Hypertable client, provides methods to handle Hypertable namespaces.
</summary>
            <seealso cref="T:Hypertable.IClient" />
        </member>
        <member name="M:Hypertable.IClient.NamespaceExists(System.String,Hypertable.INamespace)">
            <summary>
Checks if a namespace exists relative to an existing namespace.
</summary>
            <param name="name">Namespace name.</param>
            <param name="nsBase">Base namespace, might be null.</param>
            <returns>true if the namespace exists.</returns>
            <remarks>
Use '/' separator character to separate namespace names. Optionally specify nsBase
if the namespace to check is relative to an existing namespace. Namespace names are case sensitive.
</remarks>
        </member>
        <member name="M:Hypertable.IClient.NamespaceExists(System.String)">
            <summary>
Checks if a namespace exists.
</summary>
            <param name="name">Namespace name.</param>
            <returns>true if the namespace exists.</returns>
            <remarks>
Use '/' separator character to separate namespace names. Namespace names are case sensitive.
</remarks>
        </member>
        <member name="M:Hypertable.IClient.DropNamespace(System.String,Hypertable.INamespace,Hypertable.DropDispositions)">
            <summary>
Drops an existing namespace relative to an existing namespace.
</summary>
            <param name="name">Namespace name.</param>
            <param name="nsBase">Base namespace, might be null.</param>
            <param name="dispo">Defines details for the drop operation.</param>
            <remarks>
Use '/' separator character to separate namespace names. Optionally specify nsBase
if the namespace to drop is relative to an existing namespace. Namespace names are case sensitive.
</remarks>
            <seealso cref="T:Hypertable.DropDispositions" />
        </member>
        <member name="M:Hypertable.IClient.DropNamespace(System.String,Hypertable.INamespace)">
            <summary>
Drops an existing namespace relative to an existing namespace.
</summary>
            <param name="name">Namespace name.</param>
            <param name="nsBase">Base namespace, might be null.</param>
            <remarks>
Use '/' separator character to separate namespace names. Optionally specify nsBase
if the namespace to drop is relative to an existing namespace. Fails if the namespace
is not empty. Namespace names are case sensitive.
</remarks>
        </member>
        <member name="M:Hypertable.IClient.DropNamespace(System.String,Hypertable.DropDispositions)">
            <summary>
Drops an existing namespace.
</summary>
            <param name="name">Namespace name.</param>
            <param name="dispo">Defines details for the drop operation.</param>
            <remarks>
Use '/' separator character to separate namespace names. Namespace names are case sensitive.
</remarks>
            <seealso cref="T:Hypertable.DropDispositions" />
        </member>
        <member name="M:Hypertable.IClient.DropNamespace(System.String)">
            <summary>
Drops an existing namespace.
</summary>
            <param name="name">Namespace name.</param>
            <remarks>
Use '/' separator character to separate namespace names. Fails if the namespace
is not empty. Namespace names are case sensitive.
</remarks>
        </member>
        <member name="M:Hypertable.IClient.OpenNamespace(System.String,Hypertable.INamespace,Hypertable.OpenDispositions)">
            <summary>
Opens or creates a namespace relative to an existing namespace.
</summary>
            <param name="name">Namespace name.</param>
            <param name="nsBase">Base namespace, might be null.</param>
            <param name="dispo">An action to take if the namespace exists or does not exist.</param>
            <returns>Opened namespace.</returns>
            <remarks>
Use '/' separator character to separate namespace names. Optionally specify nsBase
if the namespace to open is relative to an existing namespace. Namespace names are case sensitive.
</remarks>
            <seealso cref="T:Hypertable.OpenDispositions" />
        </member>
        <member name="M:Hypertable.IClient.OpenNamespace(System.String,Hypertable.INamespace)">
            <summary>
Opens an existig namespace relative to an existing namespace.
</summary>
            <param name="name">Namespace name</param>
            <param name="nsBase">Base namespace, might be null</param>
            <returns>Opened namespace.</returns>
            <remarks>
Use '/' separator character to separate namespace names. Optionally specify nsBase
if the namespace to open is relative to an existing namespace. Namespace names are case sensitive.
</remarks>
        </member>
        <member name="M:Hypertable.IClient.OpenNamespace(System.String,Hypertable.OpenDispositions)">
            <summary>
Opens or create a namespace.
</summary>
            <param name="name">Namespace name.</param>
            <param name="dispo">An action to take if the namespace exists or does not exist.</param>
            <returns>Opened namespace.</returns>
            <remarks>
Use '/' separator character to separate namespace names. Namespace names are case sensitive.
</remarks>
            <seealso cref="T:Hypertable.OpenDispositions" />
        </member>
        <member name="M:Hypertable.IClient.OpenNamespace(System.String)">
            <summary>
Opens an existig namespace.
</summary>
            <param name="name">Namespace name.</param>
            <returns>Opened namespace.</returns>
            <remarks>
Use '/' separator character to separate namespace names. Namespace names are case sensitive.
</remarks>
        </member>
        <member name="M:Hypertable.IClient.CreateNamespace(System.String,Hypertable.INamespace,Hypertable.CreateDispositions)">
            <summary>
Creates a new namespace relative to an existing namespace.
</summary>
            <param name="name">Namespace name.</param>
            <param name="nsBase">Base namespace, might be null.</param>
            <param name="dispo">An action to take if the namespace exists or does not exist.</param>
            <remarks>
Use '/' separator character to separate namespace names. Optionally specify nsBase
to create the new namespace relative to an existing namespace. Namespace names are case sensitive.
</remarks>
            <seealso cref="T:Hypertable.CreateDispositions" />
        </member>
        <member name="M:Hypertable.IClient.CreateNamespace(System.String,Hypertable.INamespace)">
            <summary>
Creates a new namespace relative to an existing namespace.
</summary>
            <param name="name">Namespace name.</param>
            <param name="nsBase">Base namespace, might be null.</param>
            <remarks>
Use '/' separator character to separate namespace names. Optionally specify nsBase
to create the new namespace relative to an existing namespace. Fails if the namespace
already exist or intermediate namespaces do not exist. Namespace names are case sensitive.
</remarks>
        </member>
        <member name="M:Hypertable.IClient.CreateNamespace(System.String,Hypertable.CreateDispositions)">
            <summary>
Creates a new namespace.
</summary>
            <param name="name">Namespace name.</param>
            <param name="dispo">An action to take if the namespace exists or does not exist.</param>
            <remarks>
Use '/' separator character to separate namespace names. Namespace names are case sensitive.
</remarks>
            <seealso cref="T:Hypertable.CreateDispositions" />
        </member>
        <member name="M:Hypertable.IClient.CreateNamespace(System.String)">
            <summary>
Creates a new namespace.
</summary>
            <param name="name">Namespace name.</param>
            <remarks>
Use '/' separator character to separate namespace names. Fails if the namespace already exist or
intermediate namespaces do not exist. Namespace names are case sensitive.
</remarks>
        </member>
        <member name="P:Hypertable.IClient.IsDisposed">
            <summary>
Gets a value indicating whether the object has been disposed.
</summary>
            <remarks>true if the object has been disposed, otherwise false.</remarks>
        </member>
        <member name="T:Hypertable.IClient">
            <summary>
Represents a Hypertable client, provides methods to handle Hypertable namespaces.
</summary>
            <example>
The following example shows how to create and use the Client class.
<code>
using( var ctx = Context.Create("Provider=Hyper; Uri=localhost") ) {
   using( var client = ctx.CreateClient() ) {
      using( var ns = client.OpenNamespace("test", OpenDispositions.OpenAlways) ) { // here "test" or "/test" is equivalent
         // use namespace
      }
      client.DropNamespace( "test", DropDispositions.Complete );
   }
}
</code>
The following example shows how to open the root namespace.
<code>
using( var ctx = Context.Create("Provider=Hyper; Uri=localhost") ) {
   using( var client = ctx.CreateClient() ) {
      using( var ns = client.OpenNamespace("/") ) {
         // use namespace
      }
   }
}
</code></example>
        </member>
        <member name="T:Hypertable.DropDispositions">
            <summary>
Specifies possible drop disposition values.
</summary>
            <remarks>
Drop dispositions are used if dropping namespaces or tables.
</remarks>
            <seealso cref="T:Hypertable.IClient" />
            <seealso cref="T:Hypertable.INamespace" />
        </member>
        <member name="F:Hypertable.DropDispositions.Complete">
            <summary>
Drop complete namespace tree including sub namespaces and all tables.
</summary>
        </member>
        <member name="F:Hypertable.DropDispositions.Deep">
            <summary>
Include all sub namespaces, only relevant if dropping namespaces.
</summary>
        </member>
        <member name="F:Hypertable.DropDispositions.IncludeTables">
            <summary>
Include tables, only relevant if dropping namespaces.
</summary>
        </member>
        <member name="F:Hypertable.DropDispositions.IfExists">
            <summary>
Drop only if exist, does not fail if not exist.
</summary>
        </member>
        <member name="F:Hypertable.DropDispositions.None">
            <summary>
Default behaviour.
</summary>
        </member>
        <member name="T:Hypertable.OpenDispositions">
            <summary>
Specifies possible open disposition values.
</summary>
            <remarks>
Open dispositions are used if opening namespaces or tables.
</remarks>
            <seealso cref="T:Hypertable.IClient" />
            <seealso cref="T:Hypertable.INamespace" />
        </member>
        <member name="F:Hypertable.OpenDispositions.Force">
            <summary>
Bypass any table cache, only relevant if opening tables.
</summary>
        </member>
        <member name="F:Hypertable.OpenDispositions.CreateIntermediate">
            <summary>
Create intermediates if not exists, only relevant if opening namespaces.
</summary>
        </member>
        <member name="F:Hypertable.OpenDispositions.CreateAlways">
            <summary>
Create always, drop and re-create if exist (drops complete namspace sub tree if opening namespaces).
</summary>
        </member>
        <member name="F:Hypertable.OpenDispositions.OpenAlways">
            <summary>
Open always, create if not exist.
</summary>
        </member>
        <member name="F:Hypertable.OpenDispositions.OpenExisting">
            <summary>
Open only if exist, fails if not exist.
</summary>
        </member>
        <member name="T:Hypertable.CreateDispositions">
            <summary>
Specifies possible create disposition values.
</summary>
            <remarks>
Create dispositions are used if creating namespaces or tables.
</remarks>
            <seealso cref="T:Hypertable.IClient" />
        </member>
        <member name="F:Hypertable.CreateDispositions.CreateIfNotExist">
            <summary>
Create if not exist, does not fail if exist.
</summary>
        </member>
        <member name="F:Hypertable.CreateDispositions.CreateIntermediate">
            <summary>
Create intermediates if not exists.
</summary>
        </member>
        <member name="F:Hypertable.CreateDispositions.None">
            <summary>
Default behaviour.
</summary>
        </member>
    </members>
</doc>